// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

package cv.internal.rpc.admin.api;

option go_package = "go.chromium.org/luci/cv/internal/rpc/admin/api;adminpb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "go.chromium.org/luci/server/dsmapper/dsmapperpb/messages.proto";

import "go.chromium.org/luci/cv/internal/changelist/storage.proto";
import "go.chromium.org/luci/cv/internal/changelist/task.proto";
import "go.chromium.org/luci/cv/internal/configs/prjcfg/refresher/tasks.proto";
import "go.chromium.org/luci/cv/internal/gerrit/poller/storage.proto";
import "go.chromium.org/luci/cv/internal/gerrit/poller/task.proto";
import "go.chromium.org/luci/cv/internal/prjmanager/prjpb/events.proto";
import "go.chromium.org/luci/cv/internal/prjmanager/prjpb/storage.proto";
import "go.chromium.org/luci/cv/internal/prjmanager/prjpb/tasks.proto";
import "go.chromium.org/luci/cv/internal/run/bq/tasks.proto";
import "go.chromium.org/luci/cv/internal/run/eventpb/events.proto";
import "go.chromium.org/luci/cv/internal/run/eventpb/tasks.proto";
import "go.chromium.org/luci/cv/internal/run/storage.proto";
import "go.chromium.org/luci/server/quota/quotapb/service.proto";


// Admin is for CV maintainers only.
//
// CAN AND WILL CHANGE WITHOUT NOTICE IN BACKWARDS INCOMPATIBLE WAY.
service Admin {

  // GetProject returns current Project state.
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse);

  // GetProjectLogs returns ProjectLogs recorded in the past.
  rpc GetProjectLogs(GetProjectLogsRequest) returns (GetProjectLogsResponse);

  // GetRun returns current Run state.
  rpc GetRun(GetRunRequest) returns (GetRunResponse);

  // GetCL returns current CL state.
  rpc GetCL(GetCLRequest) returns (GetCLResponse);

  // GetPoller returns current Poller state.
  rpc GetPoller(GetPollerRequest) returns (GetPollerResponse);

  // SearchRuns returns Runs ordered by .CreateTime DESC (most recent first).
  rpc SearchRuns(SearchRunsRequest) returns (RunsResponse);

  /////////////////////////////////////////////////////////////////////////////
  // API to mass upgrade DS entities via server/dsmapper.
  /////////////////////////////////////////////////////////////////////////////

  // DSMLaunchJob launches a new job, pre-registered in dsmapper.go.
  //
  // If unsure about job name, use "404" and observe the error,
  // which will list all known names.
  //
  // Returns job ID.
  rpc DSMLaunchJob(DSMLaunchJobRequest) returns (DSMJobID);
  // DSMGetJob returns details of previously launched job given its ID.
  rpc DSMGetJob(DSMJobID) returns (DSMJob);
  // DSMAbortJob aborts previously launched job given its ID.
  rpc DSMAbortJob(DSMJobID) returns (google.protobuf.Empty);

  /////////////////////////////////////////////////////////////////////////////
  // Advanced APIs with side effects.
  // These APIs are for extraordinary situations only.
  /////////////////////////////////////////////////////////////////////////////

  // RefreshProjectCLs refreshes all CLs currently tracked by PM.
  //
  // This is generally safe to call, but it may consume Gerrit Quota of the
  // given project, so use with care.
  rpc RefreshProjectCLs(RefreshProjectCLsRequest) returns (RefreshProjectCLsResponse);

  // DeleteProjectEvents deletes all outstanding project events.
  //
  // DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
  //
  // Useful in case of severe emergency where a Project Manager gets stuck
  // with too many bogus events and/or an incorrect event. Usually, it's better
  // to figure out which event is incorrect and delete just that event in the
  // Cloud Datastore UI. However, in a time crunch, it may be OK to unblock a
  // busy project with this API, and manually resend important events (e.g. Run
  // Finished) via SendProjectEvent at a later time.
  //
  // Must be called with stopped manage-run task queue.
  rpc DeleteProjectEvents(DeleteProjectEventsRequest) returns (DeleteProjectEventsResponse);

  // SendProjectEvent sends event to a PM.
  //
  // DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
  //
  // The implications vary depending on the event kind.
  rpc SendProjectEvent(SendProjectEventRequest) returns (google.protobuf.Empty);
  // SendRunEvent sends event to a RM.
  //
  // DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
  //
  // The implications vary depending on the event kind.
  rpc SendRunEvent(SendRunEventRequest) returns (google.protobuf.Empty);

  // ScheduleTask schedules an arbitrary CV TQ task.
  //
  // DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
  //
  // Some TQ tasks have external side effect, e.g. exporting BQ rows, which
  // shouldn't be scheduled willy-nilly. However, this API is indispensable when
  // a bunch of BQ rows failed to be exported, say due to a misconfiguration.
  rpc ScheduleTask(ScheduleTaskRequest) returns (google.protobuf.Empty);

  /////////////////////////////////////////////////////////////////////////////
  // API to observe and modify server/quota.
  /////////////////////////////////////////////////////////////////////////////

  // GetAccounts returns the indicated Accounts.
  rpc GetQuotaAccounts(go.chromium.org.luci.server.quota.quotapb.GetAccountsRequest) returns (go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse);

  // ApplyOps updates the available resources with the provided operations.
  rpc ApplyQuotaOps(go.chromium.org.luci.server.quota.quotapb.ApplyOpsRequest) returns (go.chromium.org.luci.server.quota.quotapb.ApplyOpsResponse);
}

message GetProjectRequest {
  string project = 1;
}

// GetProjectResponse provides non-atomic snapshot of a LUCI project.
//
// The project state and outstanding events come from different entities,
// read in parallel.
message GetProjectResponse {
  cv.internal.prjmanager.prjpb.PState state = 2;
  repeated cv.internal.prjmanager.prjpb.Event events = 3;
}

message GetProjectLogsRequest {
  int32 page_size = 1;
  string page_token = 2;

  string project = 3;

  // Optional. Limits EVersions to [eversion_min, eversion_max].
  int64 eversion_min = 4;
  int64 eversion_max = 5; // inclusive, for ease of use by humans.
}

message GetProjectLogsResponse {
  repeated ProjectLog logs = 1;
}

message ProjectLog {
  int64 eversion = 1;
  cv.internal.prjmanager.prjpb.PState state = 2;
  google.protobuf.Timestamp update_time = 3;
  cv.internal.prjmanager.prjpb.LogReasons reasons = 4;
}

message GetRunRequest {
  string run = 1;
}

// GetRunResponse provides non-atomic snapshot of a Run.
//
// The Run state and outstanding events come from different entities
// read in parallel.
message GetRunResponse {
  message CL {
    int64 id = 1;
    string external_id = 2;
    cv.internal.changelist.Snapshot detail = 3;
    cv.internal.run.Trigger trigger = 4;
  }
  // State. Next tag: 26.
  string id = 1;
  int64 eversion = 2;
  string mode = 3;
  cv.internal.run.Status status = 4;
  google.protobuf.Timestamp create_time = 5;
  google.protobuf.Timestamp start_time = 6;
  google.protobuf.Timestamp update_time = 7;
  google.protobuf.Timestamp end_time = 8;
  string owner = 9;
  string created_by = 24;
  string billed_to = 25;
  string config_group_id = 10;
  reserved 11, 15;
  repeated CL cls = 23;
  cv.internal.run.Options options = 16;
  repeated string cancellation_reasons = 22;
  cv.internal.run.Tryjobs tryjobs = 17;
  cv.internal.run.OngoingLongOps ongoing_long_ops = 21;
  cv.internal.run.Submission submission = 12;
  google.protobuf.Timestamp latest_cls_refresh = 18;

  // Log entries are substantitve changes to a Run's state.
  repeated cv.internal.run.LogEntry log_entries = 19;

  // Outstanding events.
  repeated cv.internal.run.eventpb.Event events = 20;
}

message GetCLRequest{
  // One of the following.
  // Not using oneof because it's more congitive load to type for something
  // meant as a debug API only.

  int64 id = 1;
  string external_id = 2;
  string gerrit_url = 3;
}

// GetProjectResponse provides non-atomic snapshot of a project state.
//
// The config hash and status come from different DS entity than PState,
// and each event comes from its own entity and depends on yet another tombstone
// entity.
message GetCLResponse {
  // State. Next tag: 9.
  int64 id = 1;
  int64 eversion = 2;
  string external_id = 3;
  google.protobuf.Timestamp update_time = 8;
  cv.internal.changelist.Snapshot snapshot = 4;
  cv.internal.changelist.ApplicableConfig applicable_config = 5;
  cv.internal.changelist.Access access = 6;
  repeated string incomplete_runs = 7;
}

message GetPollerRequest{
  string project = 1;
}

message GetPollerResponse {
  string project = 1;
  int64 eversion = 2;
  google.protobuf.Timestamp update_time = 3;
  string config_hash = 4;
  cv.internal.gerrit.poller.QueryStates query_states = 5;
}

message DeleteProjectEventsRequest {
  string project = 1;
  int32 limit = 2;
}

message DeleteProjectEventsResponse {
  map<string, int64> events = 1;
}

message RefreshProjectCLsRequest {
  string project = 1;
}

message RefreshProjectCLsResponse{
  // Map from CL ID to the EVersion in Datastore before the refresh.
  map<int64, int64> cl_versions = 1;
}

message SendProjectEventRequest {
  string project = 1;
  cv.internal.prjmanager.prjpb.Event event = 2;
}

message SendRunEventRequest {
  string run = 1;
  cv.internal.run.eventpb.Event event = 2;
}

message SearchRunsRequest {
  int32 page_size = 1;
  string page_token = 2;

  // Optional. If omitted, scans across all active projects.
  string project = 3;
  // Optional. Returns Runs with the given status, only.
  cv.internal.run.Status status = 4;
  // Optional. Limits Runs referencing the given CL.
  GetCLRequest cl = 5;
  // Optional. Limits Runs by mode.
  string mode = 6;
}

message RunsResponse {
  repeated GetRunResponse runs = 1;
  string next_page_token = 2;
}

message ScheduleTaskRequest {
  // Next tag: 16.

  // Exactly one of the following.
  // Not using oneof because it's more congitive load to type for something
  // meant as a debug API only.

  cv.internal.changelist.UpdateCLTask update_cl = 13;
  cv.internal.changelist.BatchUpdateCLTask batch_update_cl = 14;
  cv.internal.changelist.BatchOnCLUpdatedTask batch_on_cl_updated = 15;
  cv.internal.configs.prjcfg.refresher.RefreshProjectConfigTask refresh_project_config = 1;
  cv.internal.gerrit.poller.PollGerritTask poll_gerrit = 2;
  cv.internal.prjmanager.prjpb.ManageProjectTask manage_project = 5;
  cv.internal.prjmanager.prjpb.KickManageProjectTask kick_manage_project = 6;
  cv.internal.prjmanager.prjpb.PurgeCLTask purge_cl = 7;
  cv.internal.run.bq.ExportRunToBQTask export_run_to_bq = 8;
  cv.internal.run.eventpb.ManageRunTask manage_run = 9;
  cv.internal.run.eventpb.KickManageRunTask kick_manage_run = 10;
  cv.internal.run.eventpb.ManageRunLongOpTask manage_run_long_op = 12;

  // Optional.
  string deduplication_key  = 11;
}

message DSMLaunchJobRequest {
  // Name of migration, must be registered in admin/dsmapper.go.
  string name = 1;
}

message DSMJobID {
  int64 id = 1;
}

message DSMJob {
  // Name as registered is admin/dsmapper.go.
  string name = 1;
  luci.server.dsmapper.JobInfo info = 2;
}
