// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.7
// source: go.chromium.org/luci/common/testing/truth/comparison/failure.proto

package comparison

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FindingTypeHint is a type hint for the Failure.Finding.type field.
//
// This is declared as a top-level type to avoid ugly
// Failure_Finding_FindingTypeXXX symbols.
type FindingTypeHint int32

const (
	// Indicates that `value` is just a verbatim string and needs no special
	// rendering.
	FindingTypeHint_Text FindingTypeHint = 0
	// These indicate that `value` is a kind of diff and MAY be colorized by
	// the renderer if appropriate.
	FindingTypeHint_UnifiedDiff FindingTypeHint = 1
	FindingTypeHint_CmpDiff     FindingTypeHint = 2
)

// Enum value maps for FindingTypeHint.
var (
	FindingTypeHint_name = map[int32]string{
		0: "Text",
		1: "UnifiedDiff",
		2: "CmpDiff",
	}
	FindingTypeHint_value = map[string]int32{
		"Text":        0,
		"UnifiedDiff": 1,
		"CmpDiff":     2,
	}
)

func (x FindingTypeHint) Enum() *FindingTypeHint {
	p := new(FindingTypeHint)
	*p = x
	return p
}

func (x FindingTypeHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindingTypeHint) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_enumTypes[0].Descriptor()
}

func (FindingTypeHint) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_enumTypes[0]
}

func (x FindingTypeHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindingTypeHint.Descriptor instead.
func (FindingTypeHint) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescGZIP(), []int{0}
}

// FindingLogLevel is the "log level" (like debug, info &c) of the finding.
//
// We are not including the full suite of log4j-esque levels because we don't
// need them all.
type FindingLogLevel int32

const (
	// Unknown is the default value.
	FindingLogLevel_Unknown FindingLogLevel = 0
	// Error indicates that the finding is an error-level finding.
	// These are always shown.
	FindingLogLevel_Error FindingLogLevel = 1
	// Warn indicates that the finding is a warn-level finding.
	// These should only be shown when the user wants verbose stuff.
	FindingLogLevel_Warn FindingLogLevel = 2
)

// Enum value maps for FindingLogLevel.
var (
	FindingLogLevel_name = map[int32]string{
		0: "Unknown",
		1: "Error",
		2: "Warn",
	}
	FindingLogLevel_value = map[string]int32{
		"Unknown": 0,
		"Error":   1,
		"Warn":    2,
	}
)

func (x FindingLogLevel) Enum() *FindingLogLevel {
	p := new(FindingLogLevel)
	*p = x
	return p
}

func (x FindingLogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindingLogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_enumTypes[1].Descriptor()
}

func (FindingLogLevel) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_enumTypes[1]
}

func (x FindingLogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindingLogLevel.Descriptor instead.
func (FindingLogLevel) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescGZIP(), []int{1}
}

// Failure is the factual outcome of a failing Comparison.
//
// As an example:
//
//	comparison { name: "should.Equal" type_arguments: "string" }
//	findings { name: "Expected" value: "\"hello\"" }
//	findings { name: "Actual" value: "\"meepmorp\"" }
//
// Will be rendered for the CLI like:
//
//	filename_test.go:123 should.Equal[string] FAILED
//	filename_test.go:123 Expected: "hello"
//	filename_test.go:123 Actual: "meepmorp"
//
// In the future we expect other interfaces (like a web browser) to render these
// in a similarly suitable way.
//
// Note that Failure is not intended to be hand-assembled, but is meant to be
// built with the Builder functionality in this package.
type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the ComparisonFunc which produced this Failure.
	Comparison *Failure_ComparisonFunc `protobuf:"bytes,1,opt,name=comparison,proto3" json:"comparison,omitempty"`
	// These are some facts which are logically associated with this Failure
	// (which, in turn is the outcome of a failing Comparison).
	//
	// Each finding has a 'name' and a 'value'.
	//
	// Typically, these can be renderings of the compared values (typically
	// named "Expected" and/or "Actual"), a combination of the compared values
	// (e.g. "Diff"), or a summary of why the comparison failed (e.g. "Because").
	//
	// A Finding may also have a hint to the renderer about how `value` could be
	// interpreted. This can be used to e.g. add color to a diff.
	//
	// We previously considered storing the ACTUAL values, and then having the
	// rendering process compute the diff, but:
	//   - This is generally impossible if the Failure needs to traverse a process
	//     boundary.
	//   - It turns out computing the diff on a Go type is tricky! See: go-cmp and
	//     protobuf comparison.
	//   - These are test results... carrying a full Go type all the way to the
	//     renderer is mega-overkill. Usually you can just add another Finding to
	//     clarify what's going on and this is sufficient to fix the test, which is
	//     why we're doing all this stuff... right? :)
	Findings []*Failure_Finding `protobuf:"bytes,2,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescGZIP(), []int{0}
}

func (x *Failure) GetComparison() *Failure_ComparisonFunc {
	if x != nil {
		return x.Comparison
	}
	return nil
}

func (x *Failure) GetFindings() []*Failure_Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type Failure_ComparisonFunc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the logical name of the comparison function that produced this
	// Failure, e.g. `should.Equal` or `should.HaveLength`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional type argument names. Will be used with name like
	// `should.Equal[T[0], ...]`.
	//
	// Non-primitive types should be the short Go type name like
	// `pkgname.TypeName`.
	TypeArguments []string `protobuf:"bytes,2,rep,name=type_arguments,json=typeArguments,proto3" json:"type_arguments,omitempty"`
	// Optional argument values. Will be used with name like
	// `should.HaveLength(arg)`.
	Arguments []string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Failure_ComparisonFunc) Reset() {
	*x = Failure_ComparisonFunc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure_ComparisonFunc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure_ComparisonFunc) ProtoMessage() {}

func (x *Failure_ComparisonFunc) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure_ComparisonFunc.ProtoReflect.Descriptor instead.
func (*Failure_ComparisonFunc) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Failure_ComparisonFunc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Failure_ComparisonFunc) GetTypeArguments() []string {
	if x != nil {
		return x.TypeArguments
	}
	return nil
}

func (x *Failure_ComparisonFunc) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type Failure_Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this finding. Some conventional values:
	//   - Expected - the Go rendering of the actual value that the Comparison
	//     evaluated.
	//   - Actual - the Go rendering of the actual value that the Comparison
	//     evaluated.
	//   - Diff - a combination of the Expected and Actual values which reveals
	//     something useful about the comparison. Usually computed with go-cmp,
	//     but it doesn't have to be!
	//   - Because - an explaination (in English :/) of why the Comparison
	//     failed.
	//
	// However, the name only needs to make sense in the context of the
	// Comparison, so use a name which makes sense.
	//
	// Also recall that you can have multiple Findings, and they will be
	// rendered in order.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of this Finding as a list of lines.
	//
	// The content here is completely up to you and needs to make sense in the
	// context of the Comparison and this Finding's name.
	//
	// See also `type`.
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	// This is a type hint for the renderer, when the renderer may like to
	// interpret `value` in some way to display it better (for example - to
	// colorize the output).
	//
	// This hint system is expected to be a 'good enough' compromise vs. trying
	// to have the renderer directly compute things like diffs.
	Type FindingTypeHint `protobuf:"varint,3,opt,name=type,proto3,enum=luci.common.testing.assert.comparison.FindingTypeHint" json:"type,omitempty"`
	// Level is the "log level" of this finding.
	Level FindingLogLevel `protobuf:"varint,4,opt,name=level,proto3,enum=luci.common.testing.assert.comparison.FindingLogLevel" json:"level,omitempty"`
}

func (x *Failure_Finding) Reset() {
	*x = Failure_Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure_Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure_Finding) ProtoMessage() {}

func (x *Failure_Finding) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure_Finding.ProtoReflect.Descriptor instead.
func (*Failure_Finding) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Failure_Finding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Failure_Finding) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Failure_Finding) GetType() FindingTypeHint {
	if x != nil {
		return x.Type
	}
	return FindingTypeHint_Text
}

func (x *Failure_Finding) GetLevel() FindingLogLevel {
	if x != nil {
		return x.Level
	}
	return FindingLogLevel_Unknown
}

var File_go_chromium_org_luci_common_testing_truth_comparison_failure_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x22, 0xf7, 0x03, 0x0a, 0x07,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x69, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xcd, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2a, 0x39, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x69, 0x66,
	0x66, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6d, 0x70, 0x44, 0x69, 0x66, 0x66, 0x10, 0x02,
	0x2a, 0x33, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x61, 0x72, 0x6e, 0x10, 0x02, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x72, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x3b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescData = file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDesc
)

func file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescData)
	})
	return file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDescData
}

var file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_goTypes = []interface{}{
	(FindingTypeHint)(0),           // 0: luci.common.testing.assert.comparison.FindingTypeHint
	(FindingLogLevel)(0),           // 1: luci.common.testing.assert.comparison.FindingLogLevel
	(*Failure)(nil),                // 2: luci.common.testing.assert.comparison.Failure
	(*Failure_ComparisonFunc)(nil), // 3: luci.common.testing.assert.comparison.Failure.ComparisonFunc
	(*Failure_Finding)(nil),        // 4: luci.common.testing.assert.comparison.Failure.Finding
}
var file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_depIdxs = []int32{
	3, // 0: luci.common.testing.assert.comparison.Failure.comparison:type_name -> luci.common.testing.assert.comparison.Failure.ComparisonFunc
	4, // 1: luci.common.testing.assert.comparison.Failure.findings:type_name -> luci.common.testing.assert.comparison.Failure.Finding
	0, // 2: luci.common.testing.assert.comparison.Failure.Finding.type:type_name -> luci.common.testing.assert.comparison.FindingTypeHint
	1, // 3: luci.common.testing.assert.comparison.Failure.Finding.level:type_name -> luci.common.testing.assert.comparison.FindingLogLevel
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_init() }
func file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_init() {
	if File_go_chromium_org_luci_common_testing_truth_comparison_failure_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure_ComparisonFunc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure_Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_common_testing_truth_comparison_failure_proto = out.File
	file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_rawDesc = nil
	file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_goTypes = nil
	file_go_chromium_org_luci_common_testing_truth_comparison_failure_proto_depIdxs = nil
}
