// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package truth

import (
	"go.chromium.org/luci/common/testing/truth/failure"
)

// Option is an interface to allow test authors to modify the behavior of
// truth.{Assert,Check}{,Loosely} invocations.
//
// A nil Option has no effect.
//
// See .../testing/truth/option for some useful options.
type Option interface {
	truthOption()
}

// SummaryModifierOption is a truth.Option which modifies the *failure.Summary
// of a failing comparison.
//
// Example:
//
//	truth.Assert(t, 100, should.Equal(1), SummaryModifier(func(s *failure.Summary) {
//	  s = append(s.Findings, &failure.Finding{Name: "Extra finding!"})
//	})
//
// In this example, if 100 does not equal 1, this SummaryModifier will be
// invoked on the *failure.Summary generated by should.Equal.
//
// This will never be invoked with a nil *Summary.
type SummaryModifierOption func(*failure.Summary)

func (SummaryModifierOption) truthOption() {}

// applyOpts applies all options (if any).
//
// For now, the only option to apply is SummaryModifierOption - as more options
// are added, applyOpts will likely need to be refactored.
func applyOpts(summary *failure.Summary, opts []Option) *failure.Summary {
	if summary == nil || len(opts) == 0 {
		return summary
	}
	for _, opt := range opts {
		if opt == nil {
			continue
		}
		switch x := opt.(type) {
		case SummaryModifierOption:
			x(summary)
		}
	}
	return summary
}
