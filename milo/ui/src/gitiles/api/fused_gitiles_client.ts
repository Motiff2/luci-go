// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { PrpcClient } from '@/generic_libs/tools/prpc_client';
import { getGitilesHostProject } from '@/gitiles/tools/utils';
import {
  DeepPartial,
  LogRequest,
  LogResponse,
} from '@/proto/go.chromium.org/luci/common/proto/gitiles/gitiles.pb';
import { MiloInternalClientImpl } from '@/proto/go.chromium.org/luci/milo/proto/v1/rpc.pb';
import {
  CrrevClientImpl,
  NumberingRequest,
} from '@/proto/infra/appengine/cr-rev/frontend/api/v1/service.pb';

/**
 * The same as `gitiles.LogRequest` but also support querying by commit
 * position.
 */
export type ExtendedLogRequest = LogRequest & {
  /**
   * The name of position defined in value of git-footer git-svn-id or
   * Cr-Commit-Position (e.g. refs/heads/master,
   * svn://svn.chromium.org/chrome/trunk/src)
   *
   * Required when `committish` is not specified.
   * Ignored when `committish` is specified.
   */
  readonly ref: string;
  /**
   * The sequential identifier of commit in given branch (`ref`).
   *
   * Required when `committish` is not specified.
   * Ignored when `committish` is specified.
   */
  readonly position: string;
};

function createBaseLogRequest(): ExtendedLogRequest {
  return {
    project: '',
    ref: '',
    position: '',
    committish: '',
    excludeAncestorsOf: '',
    treeDiff: false,
    path: '',
    pageToken: '',
    pageSize: 0,
  };
}

export const ExtendedLogRequest = {
  fromPartial(object: DeepPartial<ExtendedLogRequest>): ExtendedLogRequest {
    // Use the same type declaration as the type generated by ts-proto.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const message = createBaseLogRequest() as any;
    message.project = object.project ?? '';
    message.committish = object.committish ?? '';
    message.ref = object.ref ?? '';
    message.position = object.position ?? '';
    message.excludeAncestorsOf = object.excludeAncestorsOf ?? '';
    message.treeDiff = object.treeDiff ?? false;
    message.path = object.path ?? '';
    message.pageToken = object.pageToken ?? '';
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

export const ExtendedGitilesServiceName = 'extended.gitiles.Gitiles';

export interface FusedGitilesClientOpts {
  readonly service?: string;
  /**
   * The host of a CrRev service. This is used when querying commits by commit
   * position. This does not need to be included in the (react-query) cache key.
   * Given a gitiles host, project, ref and commit position, the resolved
   * commit should be the same regardless which CrRev service resolves it.
   */
  readonly crRevHost: string;
}

/**
 * Similar to `GitilesClientImpl` but fuses multiple services together to
 * address the limitations of an ordinary `GitilesClientImpl`.
 */
export class FusedGitilesClientImpl {
  static readonly DEFAULT_SERVICE = ExtendedGitilesServiceName;
  readonly service: string;

  private readonly miloClient: MiloInternalClientImpl;
  private readonly crRevClient: CrrevClientImpl;

  constructor(
    private readonly rpc: PrpcClient,
    opts: FusedGitilesClientOpts,
  ) {
    this.service = opts.service || ExtendedGitilesServiceName;
    this.miloClient = new MiloInternalClientImpl(
      new PrpcClient({
        host: '',
        insecure: location.protocol === 'http:',
        getAuthToken: rpc.getAuthToken,
      }),
    );
    this.crRevClient = new CrrevClientImpl(
      new PrpcClient({
        host: opts.crRevHost,
        // cr-rev does not require an auth token.
      }),
    );

    this.Log = this.Log.bind(this);
    this.ExtendedLog = this.ExtendedLog.bind(this);
  }

  /**
   * Similar to `GitilesClientImpl.prototype.Log` but it proxy the request
   * through `MiloInternal.ProxyGitilesLog`.
   */
  async Log(request: LogRequest): Promise<LogResponse> {
    return this.miloClient!.ProxyGitilesLog({
      host: this.rpc.host,
      request,
    });
  }

  /**
   * Similar to `GitilesClientImpl.prototype.Log` but
   * 1. support querying by commit position, and
   * 2. does not require the gitiles host to allow CORS requests from LUCI UI.
   */
  async ExtendedLog(request: ExtendedLogRequest): Promise<LogResponse> {
    if (request.committish) {
      // Use `LogRequest.fromPartial` to strip away additional properties in a
      // `ExtendedLogRequest`.
      return this.Log(LogRequest.fromPartial(request));
    }
    const numbering = await this.crRevClient.Numbering(
      NumberingRequest.fromPartial({
        host: getGitilesHostProject(this.rpc.host),
        repository: request.project,
        positionRef: request.ref,
        positionNumber: request.position,
      }),
    );
    return this.Log(
      // Use `LogRequest.fromPartial` to strip away additional properties in a
      // `ExtendedLogRequest`.
      LogRequest.fromPartial({
        ...request,
        committish: numbering.gitHash,
      }),
    );
  }
}
