// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v5.26.1
// source: go.chromium.org/chromiumos/config/proto/chromiumos/test/lab/api/usb_drive.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../../../../../../google/protobuf/timestamp.pb";

export const protobufPackage = "chromiumos.test.lab.api";

/** UsbDrive describes details of the USB drive. */
export interface UsbDrive {
  /** serial provides the serial number of the USB drive. */
  readonly serial: string;
  /** manufacturer provides the manufacturer name of the USB drive. */
  readonly manufacturer: string;
  /**
   * first_seen_time provides the time when the USB drive was first seen
   * in lab or test systems. This is used as an optional heuristic to track
   * the lifetime of USB drives and failure rates.
   */
  readonly firstSeenTime: string | undefined;
}

function createBaseUsbDrive(): UsbDrive {
  return { serial: "", manufacturer: "", firstSeenTime: undefined };
}

export const UsbDrive = {
  encode(message: UsbDrive, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.serial !== "") {
      writer.uint32(10).string(message.serial);
    }
    if (message.manufacturer !== "") {
      writer.uint32(18).string(message.manufacturer);
    }
    if (message.firstSeenTime !== undefined) {
      Timestamp.encode(toTimestamp(message.firstSeenTime), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UsbDrive {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsbDrive() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serial = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.manufacturer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.firstSeenTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsbDrive {
    return {
      serial: isSet(object.serial) ? globalThis.String(object.serial) : "",
      manufacturer: isSet(object.manufacturer) ? globalThis.String(object.manufacturer) : "",
      firstSeenTime: isSet(object.firstSeenTime) ? globalThis.String(object.firstSeenTime) : undefined,
    };
  },

  toJSON(message: UsbDrive): unknown {
    const obj: any = {};
    if (message.serial !== "") {
      obj.serial = message.serial;
    }
    if (message.manufacturer !== "") {
      obj.manufacturer = message.manufacturer;
    }
    if (message.firstSeenTime !== undefined) {
      obj.firstSeenTime = message.firstSeenTime;
    }
    return obj;
  },

  create(base?: DeepPartial<UsbDrive>): UsbDrive {
    return UsbDrive.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsbDrive>): UsbDrive {
    const message = createBaseUsbDrive() as any;
    message.serial = object.serial ?? "";
    message.manufacturer = object.manufacturer ?? "";
    message.firstSeenTime = object.firstSeenTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
