// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v5.26.1
// source: infra/unifiedfleet/api/v1/models/chromeos/device/variant_id.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "unifiedfleet.api.v1.models.chromeos.device";

/** Globally unique identifier. */
export interface VariantId {
  /** Required. Source: 'mosys platform sku', aka Device-SKU. */
  readonly value: string;
}

function createBaseVariantId(): VariantId {
  return { value: "" };
}

export const VariantId = {
  encode(message: VariantId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VariantId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariantId() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VariantId {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: VariantId): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<VariantId>): VariantId {
    return VariantId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VariantId>): VariantId {
    const message = createBaseVariantId() as any;
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
