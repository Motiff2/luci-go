// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { UseQueryOptions, useQueries } from '@tanstack/react-query';

import {
  useAuthState,
  useGetAccessToken,
} from '@/common/components/auth_state_provider';
import { PrpcClient } from '@/generic_libs/tools/prpc_client';

import {
  PrpcQueryBaseOptions,
  PrpcMethod,
  genPrpcQueryKey,
  PrpcServiceMethodKeys,
  PrpcMethodResponse,
  PrpcMethodRequest,
} from './common';

export interface UsePrpcQueriesOptions<S, MK, Req, Res, TError, TData>
  extends Omit<PrpcQueryBaseOptions<S, MK, Req>, 'request'> {
  /**
   * A list of requests to call the pRPC service with.
   * Each request here will trigger a separate pRPC call.
   */
  readonly requests: readonly Req[];
  /**
   * `options` will be passed to `useQueries` from `@tanstack/react-query`.
   */
  readonly options?: Omit<
    UseQueryOptions<Res, TError, TData, readonly unknown[]>,
    'queryKey' | 'queryFn' | 'context'
  >;
  readonly context?: UseQueryOptions['context'];
}

/**
 * Call a pRPC method via `useQueries` from `@tanstack/react-query`.
 *
 * Example:
 * ```typescript
 * // The return type is the same as the return type of an equivalent
 * // `useQueries` call. i.e. react-query specific type narrowing also works
 * // here. The type of `responses[i].data` is inferred from the supplied client
 * // implementation and method name.
 * const responses = usePrpcQueries({
 *   // The host of the pRPC server.
 *   host: 'cr-buildbucket-dev.appspot.com',
 *   // The generic client generated by ts-proto.
 *   ClientImpl: BuildsClientImpl,
 *   // The pRPC method to be called. Must be a key of the class supplied to
 *   // `ClientImpl`.
 *   method: 'SearchBuilds',
 *   // A list of type checked request objects. The type of the request object
 *   // is inferred from the supplied client implementation and method name.
 *   requests: [...]
 * })
 * ```
 *
 * Comparing to the regular `useQueries` hook, this hook
 *  * reduces boilerplate, and
 *  * ensures the `queryKey` is populated correctly.
 */
export function usePrpcQueries<
  Service extends object,
  MK extends PrpcServiceMethodKeys<Service>,
  TError = unknown,
  TData = PrpcMethodResponse<Service[MK]>,
>(
  opts: UsePrpcQueriesOptions<
    Service,
    MK,
    PrpcMethodRequest<Service[MK]>,
    PrpcMethodResponse<Service[MK]>,
    TError,
    TData
  >,
) {
  const { requests, options, context, ...baseOpts } = opts;
  const { host, insecure, ClientImpl, method } = baseOpts;

  const { identity } = useAuthState();
  const getAuthToken = useGetAccessToken();
  const client = new ClientImpl(
    new PrpcClient({ host, insecure, getAuthToken }),
  );
  const m =
    // `method` is constrained to be a key that has an associated property of
    // type `PrpcMethod` in a `Service`. Therefore `client[method]` is
    // guaranteed to be a `PrpcMethod`. TSC isn't smart enough to know that,
    // so we need to use type casting.
    (
      client[method] as PrpcMethod<
        PrpcMethodRequest<Service[MK]>,
        PrpcMethodResponse<Service[MK]>
      >
    ).bind(client);

  type Query = Omit<
    UseQueryOptions<
      PrpcMethodResponse<Service[MK]>,
      TError,
      TData,
      ReadonlyArray<unknown>
    >,
    'context'
  >;

  return useQueries({
    queries: requests.map<Query>((request) => ({
      queryKey: genPrpcQueryKey(identity, {
        ...baseOpts,
        request,
      }),
      queryFn: async () => {
        return await m(request);
      },
      ...options,
    })),
    context,
  });
}
