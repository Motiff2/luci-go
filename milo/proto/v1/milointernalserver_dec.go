// Code generated by svcdec; DO NOT EDIT.

package milopb

import (
	"context"

	proto "github.com/golang/protobuf/proto"

	gitiles "go.chromium.org/luci/common/proto/gitiles"
	projectconfig "go.chromium.org/luci/milo/proto/projectconfig"
)

type DecoratedMiloInternal struct {
	// Service is the service to decorate.
	Service MiloInternalServer
	// Prelude is called for each method before forwarding the call to Service.
	// If Prelude returns an error, then the call is skipped and the error is
	// processed via the Postlude (if one is defined), or it is returned directly.
	Prelude func(ctx context.Context, methodName string, req proto.Message) (context.Context, error)
	// Postlude is called for each method after Service has processed the call, or
	// after the Prelude has returned an error. This takes the Service's
	// response proto (which may be nil) and/or any error. The decorated
	// service will return the response (possibly mutated) and error that Postlude
	// returns.
	Postlude func(ctx context.Context, methodName string, rsp proto.Message, err error) error
}

func (s *DecoratedMiloInternal) ProxyGitilesLog(ctx context.Context, req *ProxyGitilesLogRequest) (rsp *gitiles.LogResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "ProxyGitilesLog", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.ProxyGitilesLog(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "ProxyGitilesLog", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) QueryBlamelist(ctx context.Context, req *QueryBlamelistRequest) (rsp *QueryBlamelistResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryBlamelist", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryBlamelist(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryBlamelist", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) ListProjects(ctx context.Context, req *ListProjectsRequest) (rsp *ListProjectsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "ListProjects", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.ListProjects(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "ListProjects", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) GetProjectCfg(ctx context.Context, req *GetProjectCfgRequest) (rsp *projectconfig.Project, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "GetProjectCfg", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.GetProjectCfg(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "GetProjectCfg", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) QueryRecentBuilds(ctx context.Context, req *QueryRecentBuildsRequest) (rsp *QueryRecentBuildsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryRecentBuilds", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryRecentBuilds(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryRecentBuilds", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) ListBuilders(ctx context.Context, req *ListBuildersRequest) (rsp *ListBuildersResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "ListBuilders", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.ListBuilders(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "ListBuilders", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) QueryBuilderStats(ctx context.Context, req *QueryBuilderStatsRequest) (rsp *BuilderStats, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryBuilderStats", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryBuilderStats(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryBuilderStats", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) BatchCheckPermissions(ctx context.Context, req *BatchCheckPermissionsRequest) (rsp *BatchCheckPermissionsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "BatchCheckPermissions", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.BatchCheckPermissions(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "BatchCheckPermissions", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) QueryConsoles(ctx context.Context, req *QueryConsolesRequest) (rsp *QueryConsolesResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryConsoles", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryConsoles(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryConsoles", rsp, err)
	}
	return
}

func (s *DecoratedMiloInternal) QueryConsoleSnapshots(ctx context.Context, req *QueryConsoleSnapshotsRequest) (rsp *QueryConsoleSnapshotsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryConsoleSnapshots", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryConsoleSnapshots(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryConsoleSnapshots", rsp, err)
	}
	return
}
