// Code generated by MockGen. DO NOT EDIT.
// Source: builds_service.pb.go

package buildbucketpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockisCustomMetricPreviewRequest_Class is a mock of isCustomMetricPreviewRequest_Class interface.
type MockisCustomMetricPreviewRequest_Class struct {
	ctrl     *gomock.Controller
	recorder *MockisCustomMetricPreviewRequest_ClassMockRecorder
}

// MockisCustomMetricPreviewRequest_ClassMockRecorder is the mock recorder for MockisCustomMetricPreviewRequest_Class.
type MockisCustomMetricPreviewRequest_ClassMockRecorder struct {
	mock *MockisCustomMetricPreviewRequest_Class
}

// NewMockisCustomMetricPreviewRequest_Class creates a new mock instance.
func NewMockisCustomMetricPreviewRequest_Class(ctrl *gomock.Controller) *MockisCustomMetricPreviewRequest_Class {
	mock := &MockisCustomMetricPreviewRequest_Class{ctrl: ctrl}
	mock.recorder = &MockisCustomMetricPreviewRequest_ClassMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisCustomMetricPreviewRequest_Class) EXPECT() *MockisCustomMetricPreviewRequest_ClassMockRecorder {
	return m.recorder
}

// isCustomMetricPreviewRequest_Class mocks base method.
func (m *MockisCustomMetricPreviewRequest_Class) isCustomMetricPreviewRequest_Class() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isCustomMetricPreviewRequest_Class")
}

// isCustomMetricPreviewRequest_Class indicates an expected call of isCustomMetricPreviewRequest_Class.
func (mr *MockisCustomMetricPreviewRequest_ClassMockRecorder) isCustomMetricPreviewRequest_Class() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCustomMetricPreviewRequest_Class", reflect.TypeOf((*MockisCustomMetricPreviewRequest_Class)(nil).isCustomMetricPreviewRequest_Class))
}

// MockisCustomMetricPreviewResponse_Response is a mock of isCustomMetricPreviewResponse_Response interface.
type MockisCustomMetricPreviewResponse_Response struct {
	ctrl     *gomock.Controller
	recorder *MockisCustomMetricPreviewResponse_ResponseMockRecorder
}

// MockisCustomMetricPreviewResponse_ResponseMockRecorder is the mock recorder for MockisCustomMetricPreviewResponse_Response.
type MockisCustomMetricPreviewResponse_ResponseMockRecorder struct {
	mock *MockisCustomMetricPreviewResponse_Response
}

// NewMockisCustomMetricPreviewResponse_Response creates a new mock instance.
func NewMockisCustomMetricPreviewResponse_Response(ctrl *gomock.Controller) *MockisCustomMetricPreviewResponse_Response {
	mock := &MockisCustomMetricPreviewResponse_Response{ctrl: ctrl}
	mock.recorder = &MockisCustomMetricPreviewResponse_ResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisCustomMetricPreviewResponse_Response) EXPECT() *MockisCustomMetricPreviewResponse_ResponseMockRecorder {
	return m.recorder
}

// isCustomMetricPreviewResponse_Response mocks base method.
func (m *MockisCustomMetricPreviewResponse_Response) isCustomMetricPreviewResponse_Response() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isCustomMetricPreviewResponse_Response")
}

// isCustomMetricPreviewResponse_Response indicates an expected call of isCustomMetricPreviewResponse_Response.
func (mr *MockisCustomMetricPreviewResponse_ResponseMockRecorder) isCustomMetricPreviewResponse_Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCustomMetricPreviewResponse_Response", reflect.TypeOf((*MockisCustomMetricPreviewResponse_Response)(nil).isCustomMetricPreviewResponse_Response))
}

// MockisBatchRequest_Request_Request is a mock of isBatchRequest_Request_Request interface.
type MockisBatchRequest_Request_Request struct {
	ctrl     *gomock.Controller
	recorder *MockisBatchRequest_Request_RequestMockRecorder
}

// MockisBatchRequest_Request_RequestMockRecorder is the mock recorder for MockisBatchRequest_Request_Request.
type MockisBatchRequest_Request_RequestMockRecorder struct {
	mock *MockisBatchRequest_Request_Request
}

// NewMockisBatchRequest_Request_Request creates a new mock instance.
func NewMockisBatchRequest_Request_Request(ctrl *gomock.Controller) *MockisBatchRequest_Request_Request {
	mock := &MockisBatchRequest_Request_Request{ctrl: ctrl}
	mock.recorder = &MockisBatchRequest_Request_RequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisBatchRequest_Request_Request) EXPECT() *MockisBatchRequest_Request_RequestMockRecorder {
	return m.recorder
}

// isBatchRequest_Request_Request mocks base method.
func (m *MockisBatchRequest_Request_Request) isBatchRequest_Request_Request() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isBatchRequest_Request_Request")
}

// isBatchRequest_Request_Request indicates an expected call of isBatchRequest_Request_Request.
func (mr *MockisBatchRequest_Request_RequestMockRecorder) isBatchRequest_Request_Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isBatchRequest_Request_Request", reflect.TypeOf((*MockisBatchRequest_Request_Request)(nil).isBatchRequest_Request_Request))
}

// MockisBatchResponse_Response_Response is a mock of isBatchResponse_Response_Response interface.
type MockisBatchResponse_Response_Response struct {
	ctrl     *gomock.Controller
	recorder *MockisBatchResponse_Response_ResponseMockRecorder
}

// MockisBatchResponse_Response_ResponseMockRecorder is the mock recorder for MockisBatchResponse_Response_Response.
type MockisBatchResponse_Response_ResponseMockRecorder struct {
	mock *MockisBatchResponse_Response_Response
}

// NewMockisBatchResponse_Response_Response creates a new mock instance.
func NewMockisBatchResponse_Response_Response(ctrl *gomock.Controller) *MockisBatchResponse_Response_Response {
	mock := &MockisBatchResponse_Response_Response{ctrl: ctrl}
	mock.recorder = &MockisBatchResponse_Response_ResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisBatchResponse_Response_Response) EXPECT() *MockisBatchResponse_Response_ResponseMockRecorder {
	return m.recorder
}

// isBatchResponse_Response_Response mocks base method.
func (m *MockisBatchResponse_Response_Response) isBatchResponse_Response_Response() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isBatchResponse_Response_Response")
}

// isBatchResponse_Response_Response indicates an expected call of isBatchResponse_Response_Response.
func (mr *MockisBatchResponse_Response_ResponseMockRecorder) isBatchResponse_Response_Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isBatchResponse_Response_Response", reflect.TypeOf((*MockisBatchResponse_Response_Response)(nil).isBatchResponse_Response_Response))
}

// MockBuildsClient is a mock of BuildsClient interface.
type MockBuildsClient struct {
	ctrl     *gomock.Controller
	recorder *MockBuildsClientMockRecorder
}

// MockBuildsClientMockRecorder is the mock recorder for MockBuildsClient.
type MockBuildsClientMockRecorder struct {
	mock *MockBuildsClient
}

// NewMockBuildsClient creates a new mock instance.
func NewMockBuildsClient(ctrl *gomock.Controller) *MockBuildsClient {
	mock := &MockBuildsClient{ctrl: ctrl}
	mock.recorder = &MockBuildsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildsClient) EXPECT() *MockBuildsClientMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockBuildsClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Batch", varargs...)
	ret0, _ := ret[0].(*BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batch indicates an expected call of Batch.
func (mr *MockBuildsClientMockRecorder) Batch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockBuildsClient)(nil).Batch), varargs...)
}

// CancelBuild mocks base method.
func (m *MockBuildsClient) CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBuild indicates an expected call of CancelBuild.
func (mr *MockBuildsClientMockRecorder) CancelBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBuild", reflect.TypeOf((*MockBuildsClient)(nil).CancelBuild), varargs...)
}

// CreateBuild mocks base method.
func (m *MockBuildsClient) CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild.
func (mr *MockBuildsClientMockRecorder) CreateBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockBuildsClient)(nil).CreateBuild), varargs...)
}

// CustomMetricPreview mocks base method.
func (m *MockBuildsClient) CustomMetricPreview(ctx context.Context, in *CustomMetricPreviewRequest, opts ...grpc.CallOption) (*CustomMetricPreviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomMetricPreview", varargs...)
	ret0, _ := ret[0].(*CustomMetricPreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomMetricPreview indicates an expected call of CustomMetricPreview.
func (mr *MockBuildsClientMockRecorder) CustomMetricPreview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomMetricPreview", reflect.TypeOf((*MockBuildsClient)(nil).CustomMetricPreview), varargs...)
}

// GetBuild mocks base method.
func (m *MockBuildsClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild.
func (mr *MockBuildsClientMockRecorder) GetBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockBuildsClient)(nil).GetBuild), varargs...)
}

// GetBuildStatus mocks base method.
func (m *MockBuildsClient) GetBuildStatus(ctx context.Context, in *GetBuildStatusRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuildStatus", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildStatus indicates an expected call of GetBuildStatus.
func (mr *MockBuildsClientMockRecorder) GetBuildStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildStatus", reflect.TypeOf((*MockBuildsClient)(nil).GetBuildStatus), varargs...)
}

// ScheduleBuild mocks base method.
func (m *MockBuildsClient) ScheduleBuild(ctx context.Context, in *ScheduleBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleBuild indicates an expected call of ScheduleBuild.
func (mr *MockBuildsClientMockRecorder) ScheduleBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBuild", reflect.TypeOf((*MockBuildsClient)(nil).ScheduleBuild), varargs...)
}

// SearchBuilds mocks base method.
func (m *MockBuildsClient) SearchBuilds(ctx context.Context, in *SearchBuildsRequest, opts ...grpc.CallOption) (*SearchBuildsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchBuilds", varargs...)
	ret0, _ := ret[0].(*SearchBuildsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBuilds indicates an expected call of SearchBuilds.
func (mr *MockBuildsClientMockRecorder) SearchBuilds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBuilds", reflect.TypeOf((*MockBuildsClient)(nil).SearchBuilds), varargs...)
}

// StartBuild mocks base method.
func (m *MockBuildsClient) StartBuild(ctx context.Context, in *StartBuildRequest, opts ...grpc.CallOption) (*StartBuildResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBuild", varargs...)
	ret0, _ := ret[0].(*StartBuildResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuild indicates an expected call of StartBuild.
func (mr *MockBuildsClientMockRecorder) StartBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockBuildsClient)(nil).StartBuild), varargs...)
}

// SynthesizeBuild mocks base method.
func (m *MockBuildsClient) SynthesizeBuild(ctx context.Context, in *SynthesizeBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynthesizeBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynthesizeBuild indicates an expected call of SynthesizeBuild.
func (mr *MockBuildsClientMockRecorder) SynthesizeBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynthesizeBuild", reflect.TypeOf((*MockBuildsClient)(nil).SynthesizeBuild), varargs...)
}

// UpdateBuild mocks base method.
func (m *MockBuildsClient) UpdateBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuild indicates an expected call of UpdateBuild.
func (mr *MockBuildsClientMockRecorder) UpdateBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuild", reflect.TypeOf((*MockBuildsClient)(nil).UpdateBuild), varargs...)
}

// MockBuildsServer is a mock of BuildsServer interface.
type MockBuildsServer struct {
	ctrl     *gomock.Controller
	recorder *MockBuildsServerMockRecorder
}

// MockBuildsServerMockRecorder is the mock recorder for MockBuildsServer.
type MockBuildsServerMockRecorder struct {
	mock *MockBuildsServer
}

// NewMockBuildsServer creates a new mock instance.
func NewMockBuildsServer(ctrl *gomock.Controller) *MockBuildsServer {
	mock := &MockBuildsServer{ctrl: ctrl}
	mock.recorder = &MockBuildsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildsServer) EXPECT() *MockBuildsServerMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockBuildsServer) Batch(arg0 context.Context, arg1 *BatchRequest) (*BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batch", arg0, arg1)
	ret0, _ := ret[0].(*BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batch indicates an expected call of Batch.
func (mr *MockBuildsServerMockRecorder) Batch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockBuildsServer)(nil).Batch), arg0, arg1)
}

// CancelBuild mocks base method.
func (m *MockBuildsServer) CancelBuild(arg0 context.Context, arg1 *CancelBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBuild indicates an expected call of CancelBuild.
func (mr *MockBuildsServerMockRecorder) CancelBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBuild", reflect.TypeOf((*MockBuildsServer)(nil).CancelBuild), arg0, arg1)
}

// CreateBuild mocks base method.
func (m *MockBuildsServer) CreateBuild(arg0 context.Context, arg1 *CreateBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild.
func (mr *MockBuildsServerMockRecorder) CreateBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockBuildsServer)(nil).CreateBuild), arg0, arg1)
}

// CustomMetricPreview mocks base method.
func (m *MockBuildsServer) CustomMetricPreview(arg0 context.Context, arg1 *CustomMetricPreviewRequest) (*CustomMetricPreviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomMetricPreview", arg0, arg1)
	ret0, _ := ret[0].(*CustomMetricPreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomMetricPreview indicates an expected call of CustomMetricPreview.
func (mr *MockBuildsServerMockRecorder) CustomMetricPreview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomMetricPreview", reflect.TypeOf((*MockBuildsServer)(nil).CustomMetricPreview), arg0, arg1)
}

// GetBuild mocks base method.
func (m *MockBuildsServer) GetBuild(arg0 context.Context, arg1 *GetBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild.
func (mr *MockBuildsServerMockRecorder) GetBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockBuildsServer)(nil).GetBuild), arg0, arg1)
}

// GetBuildStatus mocks base method.
func (m *MockBuildsServer) GetBuildStatus(arg0 context.Context, arg1 *GetBuildStatusRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildStatus", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildStatus indicates an expected call of GetBuildStatus.
func (mr *MockBuildsServerMockRecorder) GetBuildStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildStatus", reflect.TypeOf((*MockBuildsServer)(nil).GetBuildStatus), arg0, arg1)
}

// ScheduleBuild mocks base method.
func (m *MockBuildsServer) ScheduleBuild(arg0 context.Context, arg1 *ScheduleBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleBuild indicates an expected call of ScheduleBuild.
func (mr *MockBuildsServerMockRecorder) ScheduleBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBuild", reflect.TypeOf((*MockBuildsServer)(nil).ScheduleBuild), arg0, arg1)
}

// SearchBuilds mocks base method.
func (m *MockBuildsServer) SearchBuilds(arg0 context.Context, arg1 *SearchBuildsRequest) (*SearchBuildsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBuilds", arg0, arg1)
	ret0, _ := ret[0].(*SearchBuildsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBuilds indicates an expected call of SearchBuilds.
func (mr *MockBuildsServerMockRecorder) SearchBuilds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBuilds", reflect.TypeOf((*MockBuildsServer)(nil).SearchBuilds), arg0, arg1)
}

// StartBuild mocks base method.
func (m *MockBuildsServer) StartBuild(arg0 context.Context, arg1 *StartBuildRequest) (*StartBuildResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBuild", arg0, arg1)
	ret0, _ := ret[0].(*StartBuildResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuild indicates an expected call of StartBuild.
func (mr *MockBuildsServerMockRecorder) StartBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockBuildsServer)(nil).StartBuild), arg0, arg1)
}

// SynthesizeBuild mocks base method.
func (m *MockBuildsServer) SynthesizeBuild(arg0 context.Context, arg1 *SynthesizeBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynthesizeBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynthesizeBuild indicates an expected call of SynthesizeBuild.
func (mr *MockBuildsServerMockRecorder) SynthesizeBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynthesizeBuild", reflect.TypeOf((*MockBuildsServer)(nil).SynthesizeBuild), arg0, arg1)
}

// UpdateBuild mocks base method.
func (m *MockBuildsServer) UpdateBuild(arg0 context.Context, arg1 *UpdateBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuild indicates an expected call of UpdateBuild.
func (mr *MockBuildsServerMockRecorder) UpdateBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuild", reflect.TypeOf((*MockBuildsServer)(nil).UpdateBuild), arg0, arg1)
}
