// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.analysis.internal.bugs.monorail.migration;

option go_package = "go.chromium.org/luci/analysis/internal/bugs/monorail/migration/proto;migrationpb";

// A service that facilitates migrating projects from monorail to buganizer.
service MonorailMigration {
  // MigrateProject migrates a project's failure association rules from
  // using monorail bugs to using buganizer bugs. The buganizer bug
  // corresponding to a monorail bug is as returned by monorail.
  rpc MigrateProject(MigrateProjectRequest) returns (MigrateProjectResponse) {};
}

// Request used to migrate a project's rules from monorail to buganizer.
message MigrateProjectRequest {
  // The LUCI Project to migrate.
  string project = 1;

  // The maximum number of rules to process in one request. This allows
  // migration to be validated on a small number of rules before migrating all.
  // If unset, no rules are migrated.
  int64 max_rules = 2;
}

// Response of creating a sample issue.
message MigrateProjectResponse {
  // The number of rules which migration was attempted due to nearing request timeout.
  int64 rules_not_started = 1;

  message RuleResult {
    // The identifier of the rule to be migrated.
    string rule_id = 1;

    // The identifier of the monorail bug.
    string monorail_bug_id = 2;

    // The identifier of the buganizer bug it was to be migrated to.
    string buganizer_bug_id = 3;

    // The error (if any) migrating the rule.
    string error = 4;
  }

  // The results of rules for which a migration was attempted.
  repeated RuleResult rule_results = 2;
}
