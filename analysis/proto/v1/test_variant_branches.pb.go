// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: go.chromium.org/luci/analysis/proto/v1/test_variant_branches.proto

package analysispb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	git "go.chromium.org/luci/common/proto/git"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message for `TestVariantBranches.Get` RPC.
type GetRawTestVariantBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the test variant branch.
	// It MUST be of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
	// where:
	// PROJECT is the LUCI Project of the test variant branch analysis.
	// URL_ESCAPED_TEST_ID is the test ID, escaped with
	// https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
	// VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
	// REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRawTestVariantBranchRequest) Reset() {
	*x = GetRawTestVariantBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTestVariantBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTestVariantBranchRequest) ProtoMessage() {}

func (x *GetRawTestVariantBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTestVariantBranchRequest.ProtoReflect.Descriptor instead.
func (*GetRawTestVariantBranchRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{0}
}

func (x *GetRawTestVariantBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents changepoint analysis raw data for a particular (project, test, variant, ref) in spanner.
type TestVariantBranchRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the test variant branch.
	// Of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
	// where:
	// PROJECT is the LUCI Project of the test variant branch analysis.
	// URL_ESCAPED_TEST_ID is the test ID, escaped with
	// https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
	// VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
	// REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The LUCI Project. E.g. "chromium".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The identity of the test.
	TestId string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Hash of the variant, as 16 lowercase hexadecimal characters.
	// E.g. "96c68dc946ab4068".
	VariantHash string `protobuf:"bytes,4,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Hash of the source branch, as 16 lowercase hexadecimal characters.
	RefHash string `protobuf:"bytes,5,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"`
	// Describes one specific way of running the test, e.g. a specific bucket,
	// builder and a test suite.
	Variant *Variant `protobuf:"bytes,6,opt,name=variant,proto3" json:"variant,omitempty"`
	// The branch in source control.
	Ref *SourceRef `protobuf:"bytes,7,opt,name=ref,proto3" json:"ref,omitempty"`
	// The finalized segments in the output buffer.
	//
	// Do not depend on this field. The internal protocol buffer stored in
	// Spanner is returned here for debug purposes only. We use
	// google.protobuf.Any to avoid revealing its type and having clients
	// possibly depend on it.
	//
	// If any tool needs to read this data, a wire proto (that is different
	// from the storage proto) needs to be defined and this field replaced
	// by a field of that wire type.
	FinalizedSegments *anypb.Any `protobuf:"bytes,8,opt,name=finalized_segments,json=finalizedSegments,proto3" json:"finalized_segments,omitempty"`
	// The finalizing segment in the output buffer.
	//
	// Do not depend on this field. The internal protocol buffer stored in
	// Spanner is returned here for debug purposes only. We use
	// google.protobuf.Any to avoid revealing its type and having clients
	// possibly depend on it.
	//
	// If any tool needs to read this data, a wire proto (that is different
	// from the storage proto) needs to be defined and this field replaced
	// by a field of that wire type.
	FinalizingSegment *anypb.Any `protobuf:"bytes,9,opt,name=finalizing_segment,json=finalizingSegment,proto3" json:"finalizing_segment,omitempty"`
	// Statistics about verdicts in the output buffer.
	//
	// Do not depend on this field. The internal protocol buffer stored in
	// Spanner is returned here for debug purposes only. We use
	// google.protobuf.Any to avoid revealing its type and having clients
	// possibly depend on it.
	//
	// If any tool needs to read this data, a wire proto (that is different
	// from the storage proto) needs to be defined and this field replaced
	// by a field of that wire type.
	Statistics *anypb.Any `protobuf:"bytes,12,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// The hot input buffer.
	HotBuffer *InputBuffer `protobuf:"bytes,10,opt,name=hot_buffer,json=hotBuffer,proto3" json:"hot_buffer,omitempty"`
	// The cold input buffer.
	ColdBuffer *InputBuffer `protobuf:"bytes,11,opt,name=cold_buffer,json=coldBuffer,proto3" json:"cold_buffer,omitempty"`
}

func (x *TestVariantBranchRaw) Reset() {
	*x = TestVariantBranchRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantBranchRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantBranchRaw) ProtoMessage() {}

func (x *TestVariantBranchRaw) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantBranchRaw.ProtoReflect.Descriptor instead.
func (*TestVariantBranchRaw) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{1}
}

func (x *TestVariantBranchRaw) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestVariantBranchRaw) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVariantBranchRaw) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantBranchRaw) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestVariantBranchRaw) GetRefHash() string {
	if x != nil {
		return x.RefHash
	}
	return ""
}

func (x *TestVariantBranchRaw) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestVariantBranchRaw) GetRef() *SourceRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TestVariantBranchRaw) GetFinalizedSegments() *anypb.Any {
	if x != nil {
		return x.FinalizedSegments
	}
	return nil
}

func (x *TestVariantBranchRaw) GetFinalizingSegment() *anypb.Any {
	if x != nil {
		return x.FinalizingSegment
	}
	return nil
}

func (x *TestVariantBranchRaw) GetStatistics() *anypb.Any {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *TestVariantBranchRaw) GetHotBuffer() *InputBuffer {
	if x != nil {
		return x.HotBuffer
	}
	return nil
}

func (x *TestVariantBranchRaw) GetColdBuffer() *InputBuffer {
	if x != nil {
		return x.ColdBuffer
	}
	return nil
}

// InputBuffer contains the verdict history of the test variant branch.
// It is used for both the hot buffer and the cold buffer.
type InputBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of test verdicts in the input buffer.
	Length int64 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// Verdicts, sorted by commit position (oldest first), and
	// then result time (oldest first).
	Verdicts []*PositionVerdict `protobuf:"bytes,2,rep,name=verdicts,proto3" json:"verdicts,omitempty"`
}

func (x *InputBuffer) Reset() {
	*x = InputBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuffer) ProtoMessage() {}

func (x *InputBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuffer.ProtoReflect.Descriptor instead.
func (*InputBuffer) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{2}
}

func (x *InputBuffer) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *InputBuffer) GetVerdicts() []*PositionVerdict {
	if x != nil {
		return x.Verdicts
	}
	return nil
}

// PositionVerdict represents a test verdict at a commit position.
type PositionVerdict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The commit position for the verdict.
	CommitPosition int64 `protobuf:"varint,1,opt,name=commitPosition,proto3" json:"commitPosition,omitempty"`
	// The time that this verdict is produced, truncated to the nearest hour.
	Hour *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=hour,proto3" json:"hour,omitempty"`
	// Whether the verdict is exonerated or not.
	IsExonerated bool                   `protobuf:"varint,3,opt,name=is_exonerated,json=isExonerated,proto3" json:"is_exonerated,omitempty"`
	Runs         []*PositionVerdict_Run `protobuf:"bytes,4,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *PositionVerdict) Reset() {
	*x = PositionVerdict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionVerdict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionVerdict) ProtoMessage() {}

func (x *PositionVerdict) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionVerdict.ProtoReflect.Descriptor instead.
func (*PositionVerdict) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{3}
}

func (x *PositionVerdict) GetCommitPosition() int64 {
	if x != nil {
		return x.CommitPosition
	}
	return 0
}

func (x *PositionVerdict) GetHour() *timestamppb.Timestamp {
	if x != nil {
		return x.Hour
	}
	return nil
}

func (x *PositionVerdict) GetIsExonerated() bool {
	if x != nil {
		return x.IsExonerated
	}
	return false
}

func (x *PositionVerdict) GetRuns() []*PositionVerdict_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

// A request message for `TestVariantBranches.BatchGet` RPC.
type BatchGetTestVariantBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the test variant branch.
	// It MUST be of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
	// where:
	// PROJECT is the LUCI Project of the test variant branch analysis.
	// URL_ESCAPED_TEST_ID is the test ID, escaped with
	// https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
	// VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
	// REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
	// Maximum of 100 can be retrieved, otherwise this RPC will return error.
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *BatchGetTestVariantBranchRequest) Reset() {
	*x = BatchGetTestVariantBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTestVariantBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTestVariantBranchRequest) ProtoMessage() {}

func (x *BatchGetTestVariantBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTestVariantBranchRequest.ProtoReflect.Descriptor instead.
func (*BatchGetTestVariantBranchRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{4}
}

func (x *BatchGetTestVariantBranchRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetTestVariantBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The return list will have the same length and order as request names list.
	// If a record is not found, the corresponding element will be set to nil.
	TestVariantBranches []*TestVariantBranch `protobuf:"bytes,1,rep,name=test_variant_branches,json=testVariantBranches,proto3" json:"test_variant_branches,omitempty"`
}

func (x *BatchGetTestVariantBranchResponse) Reset() {
	*x = BatchGetTestVariantBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTestVariantBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTestVariantBranchResponse) ProtoMessage() {}

func (x *BatchGetTestVariantBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTestVariantBranchResponse.ProtoReflect.Descriptor instead.
func (*BatchGetTestVariantBranchResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGetTestVariantBranchResponse) GetTestVariantBranches() []*TestVariantBranch {
	if x != nil {
		return x.TestVariantBranches
	}
	return nil
}

// Represents changepoint analysis for a particular (project, test, variant, ref).
type TestVariantBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the test variant branch.
	// Of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
	// where:
	// PROJECT is the LUCI Project of the test variant branch analysis.
	// URL_ESCAPED_TEST_ID is the test ID, escaped with
	// https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
	// VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
	// REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The LUCI Project. E.g. "chromium".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The identity of the test.
	TestId string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Hash of the variant, as 16 lowercase hexadecimal characters.
	// E.g. "96c68dc946ab4068".
	VariantHash string `protobuf:"bytes,4,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Hash of the source branch, as 16 lowercase hexadecimal characters.
	RefHash string `protobuf:"bytes,5,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"`
	// key:value pairs to specify the way of running a particular test.
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,6,opt,name=variant,proto3" json:"variant,omitempty"`
	// The branch in source control.
	Ref *SourceRef `protobuf:"bytes,7,opt,name=ref,proto3" json:"ref,omitempty"`
	// The test history represented as a set of [start commit position,
	// end commit position] segments, where segments have statistically
	// different failure and/or flake rates. The segments are ordered so that
	// the most recent segment appears first.
	// If a client is only interested in the current failure/flake rate, they
	// can just query the first segment.
	Segments []*Segment `protobuf:"bytes,8,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *TestVariantBranch) Reset() {
	*x = TestVariantBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantBranch) ProtoMessage() {}

func (x *TestVariantBranch) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantBranch.ProtoReflect.Descriptor instead.
func (*TestVariantBranch) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{6}
}

func (x *TestVariantBranch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestVariantBranch) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVariantBranch) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantBranch) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestVariantBranch) GetRefHash() string {
	if x != nil {
		return x.RefHash
	}
	return ""
}

func (x *TestVariantBranch) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestVariantBranch) GetRef() *SourceRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TestVariantBranch) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Represents a period in history where the test had a consistent failure and
// flake rate. Segments are separated by changepoints. Each segment captures
// information about the changepoint which started it.
// Same structure with bigquery proto here, but make a separate copy to allow it to evolve over time.
// https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/analysis/proto/bq/test_variant_branch_row.proto;l=80
type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, means the segment commenced with a changepoint.
	// If unset, means the segment began with the beginning of recorded
	// history for the segment. (All recorded history for a test variant branch
	// is deleted after 90 days of no results, so this means there were
	// no results for at least 90 days before the segment.)
	HasStartChangepoint bool `protobuf:"varint,1,opt,name=has_start_changepoint,json=hasStartChangepoint,proto3" json:"has_start_changepoint,omitempty"`
	// The nominal commit position at which the segment starts (inclusive).
	// Guaranteed to be strictly greater than the end_position of the
	// chronologically previous segment (if any).
	// If this segment has a starting changepoint, this is the nominal position
	// of the changepoint (when the new test behaviour started).
	// If this segment does not have a starting changepoint, this is the
	// simply the first commit position in the known history of the test.
	StartPosition int64 `protobuf:"varint,2,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The lower bound of the starting changepoint position in a 99% two-tailed
	// confidence interval. Inclusive.
	// Only set if has_start_changepoint is set.
	StartPositionLowerBound_99Th int64 `protobuf:"varint,3,opt,name=start_position_lower_bound_99th,json=startPositionLowerBound99th,proto3" json:"start_position_lower_bound_99th,omitempty"`
	// The upper bound of the starting changepoint position in a 99% two-tailed
	// confidence interval. Inclusive.
	// Only set if has_start_changepoint is set.
	// When has_start_changepoint is set, the following invariant holds:
	// previous_segment.start_position <= start_position_lower_bound_99th <= start_position <= start_position_upper_bound_99th
	// where previous_segment refers to the chronologically previous segment.
	StartPositionUpperBound_99Th int64 `protobuf:"varint,4,opt,name=start_position_upper_bound_99th,json=startPositionUpperBound99th,proto3" json:"start_position_upper_bound_99th,omitempty"`
	// The earliest hour a test verdict at the indicated start_position
	// was recorded. Gives an approximate upper bound on the timestamp the
	// changepoint occurred, for systems which need to filter by date.
	StartHour *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// The nominal commit position at which the segment ends (inclusive).
	// This is either the last recorded commit position in the test history
	// (for this test variant branch), or the position of the last verdict
	// seen before the next detected changepoint.
	EndPosition int64 `protobuf:"varint,6,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	// The earliest hour a test verdict at the indicated end_position
	// was recorded. Gives an approximate lower bound on the  timestamp
	// the changepoint occurred, for systems which need to filter by date.
	EndHour *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	// Total number of test results/runs/verdicts in the segment.
	Counts *Segment_Counts `protobuf:"bytes,8,opt,name=counts,proto3" json:"counts,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{7}
}

func (x *Segment) GetHasStartChangepoint() bool {
	if x != nil {
		return x.HasStartChangepoint
	}
	return false
}

func (x *Segment) GetStartPosition() int64 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *Segment) GetStartPositionLowerBound_99Th() int64 {
	if x != nil {
		return x.StartPositionLowerBound_99Th
	}
	return 0
}

func (x *Segment) GetStartPositionUpperBound_99Th() int64 {
	if x != nil {
		return x.StartPositionUpperBound_99Th
	}
	return 0
}

func (x *Segment) GetStartHour() *timestamppb.Timestamp {
	if x != nil {
		return x.StartHour
	}
	return nil
}

func (x *Segment) GetEndPosition() int64 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *Segment) GetEndHour() *timestamppb.Timestamp {
	if x != nil {
		return x.EndHour
	}
	return nil
}

func (x *Segment) GetCounts() *Segment_Counts {
	if x != nil {
		return x.Counts
	}
	return nil
}

type QuerySourcePositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The LUCI project.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The identifier of a test.
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The hash of the variant.
	VariantHash string `protobuf:"bytes,3,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Hash of the source branch, as 16 lowercase hexadecimal characters.
	RefHash string `protobuf:"bytes,4,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"`
	// The source position where to start listing from, inclusive.
	StartSourcePosition int64 `protobuf:"varint,5,opt,name=start_source_position,json=startSourcePosition,proto3" json:"start_source_position,omitempty"`
	// The maximum number of commits to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 commits will be returned.
	// The maximum value is 1,000; values above 1,000 will be coerced to 1,000.
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QuerySourcePositions` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QuerySourcePositions` MUST
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *QuerySourcePositionsRequest) Reset() {
	*x = QuerySourcePositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySourcePositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySourcePositionsRequest) ProtoMessage() {}

func (x *QuerySourcePositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySourcePositionsRequest.ProtoReflect.Descriptor instead.
func (*QuerySourcePositionsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{8}
}

func (x *QuerySourcePositionsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QuerySourcePositionsRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *QuerySourcePositionsRequest) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *QuerySourcePositionsRequest) GetRefHash() string {
	if x != nil {
		return x.RefHash
	}
	return ""
}

func (x *QuerySourcePositionsRequest) GetStartSourcePosition() int64 {
	if x != nil {
		return x.StartSourcePosition
	}
	return 0
}

func (x *QuerySourcePositionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QuerySourcePositionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QuerySourcePositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source positions in descending order, start from the commit at start_source_position.
	SourcePositions []*SourcePosition `protobuf:"bytes,1,rep,name=source_positions,json=sourcePositions,proto3" json:"source_positions,omitempty"`
	// A page token for next QuerySourcePositionsRequest to fetch the next page of commits.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *QuerySourcePositionsResponse) Reset() {
	*x = QuerySourcePositionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySourcePositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySourcePositionsResponse) ProtoMessage() {}

func (x *QuerySourcePositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySourcePositionsResponse.ProtoReflect.Descriptor instead.
func (*QuerySourcePositionsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{9}
}

func (x *QuerySourcePositionsResponse) GetSourcePositions() []*SourcePosition {
	if x != nil {
		return x.SourcePositions
	}
	return nil
}

func (x *QuerySourcePositionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// SourcePosition contains the commit and the test verdicts at a source position for a test variant branch.
type SourcePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source position.
	Position int64 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	// The git commit.
	Commit *git.Commit `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	// Test verdicts at this source position.
	// Test verdicts will be ordered by `partition_time` DESC.
	// At most 20 verdicts will be returned here.
	// Most of time, a test variant at the same source position has less than 20 verdicts.
	Verdicts []*TestVerdict `protobuf:"bytes,3,rep,name=verdicts,proto3" json:"verdicts,omitempty"`
}

func (x *SourcePosition) Reset() {
	*x = SourcePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourcePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourcePosition) ProtoMessage() {}

func (x *SourcePosition) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourcePosition.ProtoReflect.Descriptor instead.
func (*SourcePosition) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{10}
}

func (x *SourcePosition) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SourcePosition) GetCommit() *git.Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *SourcePosition) GetVerdicts() []*TestVerdict {
	if x != nil {
		return x.Verdicts
	}
	return nil
}

type PositionVerdict_Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of expectedly passed results in the run.
	ExpectedPassCount int64 `protobuf:"varint,1,opt,name=expected_pass_count,json=expectedPassCount,proto3" json:"expected_pass_count,omitempty"`
	// Number of expectedly failed results in the run.
	ExpectedFailCount int64 `protobuf:"varint,2,opt,name=expected_fail_count,json=expectedFailCount,proto3" json:"expected_fail_count,omitempty"`
	// Number of expectedly crashed results in the run.
	ExpectedCrashCount int64 `protobuf:"varint,3,opt,name=expected_crash_count,json=expectedCrashCount,proto3" json:"expected_crash_count,omitempty"`
	// Number of expectedly aborted results in the run.
	ExpectedAbortCount int64 `protobuf:"varint,4,opt,name=expected_abort_count,json=expectedAbortCount,proto3" json:"expected_abort_count,omitempty"`
	// Number of unexpectedly passed results in the run.
	UnexpectedPassCount int64 `protobuf:"varint,5,opt,name=unexpected_pass_count,json=unexpectedPassCount,proto3" json:"unexpected_pass_count,omitempty"`
	// Number of unexpectedly failed results in the run.
	UnexpectedFailCount int64 `protobuf:"varint,6,opt,name=unexpected_fail_count,json=unexpectedFailCount,proto3" json:"unexpected_fail_count,omitempty"`
	// Number of unexpectedly crashed results in the run.
	UnexpectedCrashCount int64 `protobuf:"varint,7,opt,name=unexpected_crash_count,json=unexpectedCrashCount,proto3" json:"unexpected_crash_count,omitempty"`
	// Number of unexpectedly aborted results in the run.
	UnexpectedAbortCount int64 `protobuf:"varint,8,opt,name=unexpected_abort_count,json=unexpectedAbortCount,proto3" json:"unexpected_abort_count,omitempty"`
	// Whether this run is a duplicate run.
	IsDuplicate bool `protobuf:"varint,9,opt,name=is_duplicate,json=isDuplicate,proto3" json:"is_duplicate,omitempty"`
}

func (x *PositionVerdict_Run) Reset() {
	*x = PositionVerdict_Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionVerdict_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionVerdict_Run) ProtoMessage() {}

func (x *PositionVerdict_Run) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionVerdict_Run.ProtoReflect.Descriptor instead.
func (*PositionVerdict_Run) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PositionVerdict_Run) GetExpectedPassCount() int64 {
	if x != nil {
		return x.ExpectedPassCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetExpectedFailCount() int64 {
	if x != nil {
		return x.ExpectedFailCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetExpectedCrashCount() int64 {
	if x != nil {
		return x.ExpectedCrashCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetExpectedAbortCount() int64 {
	if x != nil {
		return x.ExpectedAbortCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetUnexpectedPassCount() int64 {
	if x != nil {
		return x.UnexpectedPassCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetUnexpectedFailCount() int64 {
	if x != nil {
		return x.UnexpectedFailCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetUnexpectedCrashCount() int64 {
	if x != nil {
		return x.UnexpectedCrashCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetUnexpectedAbortCount() int64 {
	if x != nil {
		return x.UnexpectedAbortCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

// Counts of verdicts over a time period. Includes only
// test verdicts for submitted code changes. This is defined as:
// (1) where the code under test was already submitted when the test ran
//
//	(e.g. postsubmit builders)
//
// (2) where the code under test was not submitted at the time the test ran,
//
//	but was submitted immediately after (e.g. because the tests ran as part
//	of a tryjob, the presubmit run the tryjob was triggered by succeeded,
//	and submitted code as a result).
//	Currently, when test results lead to CL submission via recycled CQ runs,
//	they are not counted.
//
// Statistics for test results and test runs can be added here when needed.
type Segment_Counts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of verdicts with only unexpected test results.
	UnexpectedVerdicts int32 `protobuf:"varint,1,opt,name=unexpected_verdicts,json=unexpectedVerdicts,proto3" json:"unexpected_verdicts,omitempty"`
	// The number of verdicts with a mix of expected and unexpected test results.
	FlakyVerdicts int32 `protobuf:"varint,2,opt,name=flaky_verdicts,json=flakyVerdicts,proto3" json:"flaky_verdicts,omitempty"`
	// The total number of verdicts.
	TotalVerdicts int32 `protobuf:"varint,3,opt,name=total_verdicts,json=totalVerdicts,proto3" json:"total_verdicts,omitempty"`
}

func (x *Segment_Counts) Reset() {
	*x = Segment_Counts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_Counts) ProtoMessage() {}

func (x *Segment_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_Counts.ProtoReflect.Descriptor instead.
func (*Segment_Counts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Segment_Counts) GetUnexpectedVerdicts() int32 {
	if x != nil {
		return x.UnexpectedVerdicts
	}
	return 0
}

func (x *Segment_Counts) GetFlakyVerdicts() int32 {
	if x != nil {
		return x.FlakyVerdicts
	}
	return 0
}

func (x *Segment_Counts) GetTotalVerdicts() int32 {
	if x != nil {
		return x.TotalVerdicts
	}
	return 0
}

var File_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x04, 0x0a, 0x14, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x61,
	0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x66, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x43, 0x0a, 0x12, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x43, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x68, 0x6f,
	0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x09, 0x68,
	0x6f, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x64,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x64, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x3d, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x52, 0x08, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x22, 0x8c,
	0x05, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x1a, 0xc0, 0x03, 0x0a, 0x03, 0x52,
	0x75, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x72, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x72, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x75, 0x6e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x61,
	0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x72, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a,
	0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x21,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x11, 0x54,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xc9, 0x04, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x39, 0x39, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x39, 0x74, 0x68, 0x12, 0x44, 0x0a,
	0x1f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x39, 0x39, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x39,
	0x39, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x1a, 0x87, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x75, 0x6e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x56, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x22, 0xfe, 0x01, 0x0a,
	0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x01,
	0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x08, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x73, 0x32, 0xeb, 0x02, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x77, 0x12, 0x30, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x61, 0x77, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x33, 0x5a, 0x31, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescData = file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDesc
)

func file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescData)
	})
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_goTypes = []interface{}{
	(*GetRawTestVariantBranchRequest)(nil),    // 0: luci.analysis.v1.GetRawTestVariantBranchRequest
	(*TestVariantBranchRaw)(nil),              // 1: luci.analysis.v1.TestVariantBranchRaw
	(*InputBuffer)(nil),                       // 2: luci.analysis.v1.InputBuffer
	(*PositionVerdict)(nil),                   // 3: luci.analysis.v1.PositionVerdict
	(*BatchGetTestVariantBranchRequest)(nil),  // 4: luci.analysis.v1.BatchGetTestVariantBranchRequest
	(*BatchGetTestVariantBranchResponse)(nil), // 5: luci.analysis.v1.BatchGetTestVariantBranchResponse
	(*TestVariantBranch)(nil),                 // 6: luci.analysis.v1.TestVariantBranch
	(*Segment)(nil),                           // 7: luci.analysis.v1.Segment
	(*QuerySourcePositionsRequest)(nil),       // 8: luci.analysis.v1.QuerySourcePositionsRequest
	(*QuerySourcePositionsResponse)(nil),      // 9: luci.analysis.v1.QuerySourcePositionsResponse
	(*SourcePosition)(nil),                    // 10: luci.analysis.v1.SourcePosition
	(*PositionVerdict_Run)(nil),               // 11: luci.analysis.v1.PositionVerdict.Run
	(*Segment_Counts)(nil),                    // 12: luci.analysis.v1.Segment.Counts
	(*Variant)(nil),                           // 13: luci.analysis.v1.Variant
	(*SourceRef)(nil),                         // 14: luci.analysis.v1.SourceRef
	(*anypb.Any)(nil),                         // 15: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),             // 16: google.protobuf.Timestamp
	(*git.Commit)(nil),                        // 17: git.Commit
	(*TestVerdict)(nil),                       // 18: luci.analysis.v1.TestVerdict
}
var file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_depIdxs = []int32{
	13, // 0: luci.analysis.v1.TestVariantBranchRaw.variant:type_name -> luci.analysis.v1.Variant
	14, // 1: luci.analysis.v1.TestVariantBranchRaw.ref:type_name -> luci.analysis.v1.SourceRef
	15, // 2: luci.analysis.v1.TestVariantBranchRaw.finalized_segments:type_name -> google.protobuf.Any
	15, // 3: luci.analysis.v1.TestVariantBranchRaw.finalizing_segment:type_name -> google.protobuf.Any
	15, // 4: luci.analysis.v1.TestVariantBranchRaw.statistics:type_name -> google.protobuf.Any
	2,  // 5: luci.analysis.v1.TestVariantBranchRaw.hot_buffer:type_name -> luci.analysis.v1.InputBuffer
	2,  // 6: luci.analysis.v1.TestVariantBranchRaw.cold_buffer:type_name -> luci.analysis.v1.InputBuffer
	3,  // 7: luci.analysis.v1.InputBuffer.verdicts:type_name -> luci.analysis.v1.PositionVerdict
	16, // 8: luci.analysis.v1.PositionVerdict.hour:type_name -> google.protobuf.Timestamp
	11, // 9: luci.analysis.v1.PositionVerdict.runs:type_name -> luci.analysis.v1.PositionVerdict.Run
	6,  // 10: luci.analysis.v1.BatchGetTestVariantBranchResponse.test_variant_branches:type_name -> luci.analysis.v1.TestVariantBranch
	13, // 11: luci.analysis.v1.TestVariantBranch.variant:type_name -> luci.analysis.v1.Variant
	14, // 12: luci.analysis.v1.TestVariantBranch.ref:type_name -> luci.analysis.v1.SourceRef
	7,  // 13: luci.analysis.v1.TestVariantBranch.segments:type_name -> luci.analysis.v1.Segment
	16, // 14: luci.analysis.v1.Segment.start_hour:type_name -> google.protobuf.Timestamp
	16, // 15: luci.analysis.v1.Segment.end_hour:type_name -> google.protobuf.Timestamp
	12, // 16: luci.analysis.v1.Segment.counts:type_name -> luci.analysis.v1.Segment.Counts
	10, // 17: luci.analysis.v1.QuerySourcePositionsResponse.source_positions:type_name -> luci.analysis.v1.SourcePosition
	17, // 18: luci.analysis.v1.SourcePosition.commit:type_name -> git.Commit
	18, // 19: luci.analysis.v1.SourcePosition.verdicts:type_name -> luci.analysis.v1.TestVerdict
	0,  // 20: luci.analysis.v1.TestVariantBranches.GetRaw:input_type -> luci.analysis.v1.GetRawTestVariantBranchRequest
	4,  // 21: luci.analysis.v1.TestVariantBranches.BatchGet:input_type -> luci.analysis.v1.BatchGetTestVariantBranchRequest
	8,  // 22: luci.analysis.v1.TestVariantBranches.QuerySourcePositions:input_type -> luci.analysis.v1.QuerySourcePositionsRequest
	1,  // 23: luci.analysis.v1.TestVariantBranches.GetRaw:output_type -> luci.analysis.v1.TestVariantBranchRaw
	5,  // 24: luci.analysis.v1.TestVariantBranches.BatchGet:output_type -> luci.analysis.v1.BatchGetTestVariantBranchResponse
	9,  // 25: luci.analysis.v1.TestVariantBranches.QuerySourcePositions:output_type -> luci.analysis.v1.QuerySourcePositionsResponse
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_init() }
func file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_test_verdict_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTestVariantBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantBranchRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionVerdict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTestVariantBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTestVariantBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySourcePositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySourcePositionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourcePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionVerdict_Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment_Counts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto = out.File
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDesc = nil
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestVariantBranchesClient is the client API for TestVariantBranches service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestVariantBranchesClient interface {
	// Retrieves the raw state of test variant branch analysis.
	// For reading test variant branch analyses from Spanner.
	// This enables us to inspect the state of a test variant branch
	// analysis in Spanner (which cannot easily inspected using SQL queries,
	// because the data is encoded).
	// This is currently only for LUCI Analysis admin users.
	GetRaw(ctx context.Context, in *GetRawTestVariantBranchRequest, opts ...grpc.CallOption) (*TestVariantBranchRaw, error)
	// Retrieves the current state of segments of test variant branch analysis in batches.
	BatchGet(ctx context.Context, in *BatchGetTestVariantBranchRequest, opts ...grpc.CallOption) (*BatchGetTestVariantBranchResponse, error)
	// Lists commits and the test verdicts at these commits, starting from a source position.
	QuerySourcePositions(ctx context.Context, in *QuerySourcePositionsRequest, opts ...grpc.CallOption) (*QuerySourcePositionsResponse, error)
}
type testVariantBranchesPRPCClient struct {
	client *prpc.Client
}

func NewTestVariantBranchesPRPCClient(client *prpc.Client) TestVariantBranchesClient {
	return &testVariantBranchesPRPCClient{client}
}

func (c *testVariantBranchesPRPCClient) GetRaw(ctx context.Context, in *GetRawTestVariantBranchRequest, opts ...grpc.CallOption) (*TestVariantBranchRaw, error) {
	out := new(TestVariantBranchRaw)
	err := c.client.Call(ctx, "luci.analysis.v1.TestVariantBranches", "GetRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testVariantBranchesPRPCClient) BatchGet(ctx context.Context, in *BatchGetTestVariantBranchRequest, opts ...grpc.CallOption) (*BatchGetTestVariantBranchResponse, error) {
	out := new(BatchGetTestVariantBranchResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.TestVariantBranches", "BatchGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testVariantBranchesPRPCClient) QuerySourcePositions(ctx context.Context, in *QuerySourcePositionsRequest, opts ...grpc.CallOption) (*QuerySourcePositionsResponse, error) {
	out := new(QuerySourcePositionsResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.TestVariantBranches", "QuerySourcePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type testVariantBranchesClient struct {
	cc grpc.ClientConnInterface
}

func NewTestVariantBranchesClient(cc grpc.ClientConnInterface) TestVariantBranchesClient {
	return &testVariantBranchesClient{cc}
}

func (c *testVariantBranchesClient) GetRaw(ctx context.Context, in *GetRawTestVariantBranchRequest, opts ...grpc.CallOption) (*TestVariantBranchRaw, error) {
	out := new(TestVariantBranchRaw)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.TestVariantBranches/GetRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testVariantBranchesClient) BatchGet(ctx context.Context, in *BatchGetTestVariantBranchRequest, opts ...grpc.CallOption) (*BatchGetTestVariantBranchResponse, error) {
	out := new(BatchGetTestVariantBranchResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.TestVariantBranches/BatchGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testVariantBranchesClient) QuerySourcePositions(ctx context.Context, in *QuerySourcePositionsRequest, opts ...grpc.CallOption) (*QuerySourcePositionsResponse, error) {
	out := new(QuerySourcePositionsResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.TestVariantBranches/QuerySourcePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestVariantBranchesServer is the server API for TestVariantBranches service.
type TestVariantBranchesServer interface {
	// Retrieves the raw state of test variant branch analysis.
	// For reading test variant branch analyses from Spanner.
	// This enables us to inspect the state of a test variant branch
	// analysis in Spanner (which cannot easily inspected using SQL queries,
	// because the data is encoded).
	// This is currently only for LUCI Analysis admin users.
	GetRaw(context.Context, *GetRawTestVariantBranchRequest) (*TestVariantBranchRaw, error)
	// Retrieves the current state of segments of test variant branch analysis in batches.
	BatchGet(context.Context, *BatchGetTestVariantBranchRequest) (*BatchGetTestVariantBranchResponse, error)
	// Lists commits and the test verdicts at these commits, starting from a source position.
	QuerySourcePositions(context.Context, *QuerySourcePositionsRequest) (*QuerySourcePositionsResponse, error)
}

// UnimplementedTestVariantBranchesServer can be embedded to have forward compatible implementations.
type UnimplementedTestVariantBranchesServer struct {
}

func (*UnimplementedTestVariantBranchesServer) GetRaw(context.Context, *GetRawTestVariantBranchRequest) (*TestVariantBranchRaw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaw not implemented")
}
func (*UnimplementedTestVariantBranchesServer) BatchGet(context.Context, *BatchGetTestVariantBranchRequest) (*BatchGetTestVariantBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGet not implemented")
}
func (*UnimplementedTestVariantBranchesServer) QuerySourcePositions(context.Context, *QuerySourcePositionsRequest) (*QuerySourcePositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySourcePositions not implemented")
}

func RegisterTestVariantBranchesServer(s prpc.Registrar, srv TestVariantBranchesServer) {
	s.RegisterService(&_TestVariantBranches_serviceDesc, srv)
}

func _TestVariantBranches_GetRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawTestVariantBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestVariantBranchesServer).GetRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.TestVariantBranches/GetRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestVariantBranchesServer).GetRaw(ctx, req.(*GetRawTestVariantBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestVariantBranches_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetTestVariantBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestVariantBranchesServer).BatchGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.TestVariantBranches/BatchGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestVariantBranchesServer).BatchGet(ctx, req.(*BatchGetTestVariantBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestVariantBranches_QuerySourcePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySourcePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestVariantBranchesServer).QuerySourcePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.TestVariantBranches/QuerySourcePositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestVariantBranchesServer).QuerySourcePositions(ctx, req.(*QuerySourcePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestVariantBranches_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.analysis.v1.TestVariantBranches",
	HandlerType: (*TestVariantBranchesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRaw",
			Handler:    _TestVariantBranches_GetRaw_Handler,
		},
		{
			MethodName: "BatchGet",
			Handler:    _TestVariantBranches_BatchGet_Handler,
		},
		{
			MethodName: "QuerySourcePositions",
			Handler:    _TestVariantBranches_QuerySourcePositions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/analysis/proto/v1/test_variant_branches.proto",
}
