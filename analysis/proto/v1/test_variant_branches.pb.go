// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: go.chromium.org/luci/analysis/proto/v1/test_variant_branches.proto

package analysispb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message for `TestVariantBranches.Get` RPC.
type GetTestVariantBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the test variant branch.
	// It MUST be of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
	// where:
	// PROJECT is the LUCI Project of the test variant branch analysis.
	// URL_ESCAPED_TEST_ID is the test ID, escaped with
	// https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
	// VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
	// REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTestVariantBranchRequest) Reset() {
	*x = GetTestVariantBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestVariantBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestVariantBranchRequest) ProtoMessage() {}

func (x *GetTestVariantBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestVariantBranchRequest.ProtoReflect.Descriptor instead.
func (*GetTestVariantBranchRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{0}
}

func (x *GetTestVariantBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents changepoint analysis for a particular (project, test, variant, ref).
type TestVariantBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the test variant branch.
	// Of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
	// where:
	// PROJECT is the LUCI Project of the test variant branch analysis.
	// URL_ESCAPED_TEST_ID is the test ID, escaped with
	// https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
	// VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
	// REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The LUCI Project. E.g. "chromium".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The identity of the test.
	TestId string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Hash of the variant, as 16 lowercase hexadecimal characters.
	// E.g. "96c68dc946ab4068".
	VariantHash string `protobuf:"bytes,4,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Hash of the source branch, as 16 lowercase hexadecimal characters.
	RefHash string `protobuf:"bytes,5,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"`
	// Describes one specific way of running the test, e.g. a specific bucket,
	// builder and a test suite.
	Variant *Variant `protobuf:"bytes,6,opt,name=variant,proto3" json:"variant,omitempty"`
	// The branch in source control.
	Ref *SourceRef `protobuf:"bytes,7,opt,name=ref,proto3" json:"ref,omitempty"`
	// The finalized segments in the output buffer.
	//
	// Do not depend on this field. The internal protocol buffer stored in
	// Spanner is returned here for debug purposes only. We use
	// google.protobuf.Any to avoid revealing its type and having clients
	// possibly depend on it.
	//
	// If any tool needs to read this data, a wire proto (that is different
	// from the storage proto) needs to be defined and this field replaced
	// by a field of that wire type.
	FinalizedSegments *anypb.Any `protobuf:"bytes,8,opt,name=finalized_segments,json=finalizedSegments,proto3" json:"finalized_segments,omitempty"`
	// The finalizing segment in the output buffer.
	//
	// Do not depend on this field. The internal protocol buffer stored in
	// Spanner is returned here for debug purposes only. We use
	// google.protobuf.Any to avoid revealing its type and having clients
	// possibly depend on it.
	//
	// If any tool needs to read this data, a wire proto (that is different
	// from the storage proto) needs to be defined and this field replaced
	// by a field of that wire type.
	FinalizingSegment *anypb.Any `protobuf:"bytes,9,opt,name=finalizing_segment,json=finalizingSegment,proto3" json:"finalizing_segment,omitempty"`
	// Statistics about verdicts in the output buffer.
	//
	// Do not depend on this field. The internal protocol buffer stored in
	// Spanner is returned here for debug purposes only. We use
	// google.protobuf.Any to avoid revealing its type and having clients
	// possibly depend on it.
	//
	// If any tool needs to read this data, a wire proto (that is different
	// from the storage proto) needs to be defined and this field replaced
	// by a field of that wire type.
	Statistics *anypb.Any `protobuf:"bytes,12,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// The hot input buffer.
	HotBuffer *InputBuffer `protobuf:"bytes,10,opt,name=hot_buffer,json=hotBuffer,proto3" json:"hot_buffer,omitempty"`
	// The cold input buffer.
	ColdBuffer *InputBuffer `protobuf:"bytes,11,opt,name=cold_buffer,json=coldBuffer,proto3" json:"cold_buffer,omitempty"`
}

func (x *TestVariantBranch) Reset() {
	*x = TestVariantBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantBranch) ProtoMessage() {}

func (x *TestVariantBranch) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantBranch.ProtoReflect.Descriptor instead.
func (*TestVariantBranch) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{1}
}

func (x *TestVariantBranch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestVariantBranch) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVariantBranch) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantBranch) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestVariantBranch) GetRefHash() string {
	if x != nil {
		return x.RefHash
	}
	return ""
}

func (x *TestVariantBranch) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestVariantBranch) GetRef() *SourceRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TestVariantBranch) GetFinalizedSegments() *anypb.Any {
	if x != nil {
		return x.FinalizedSegments
	}
	return nil
}

func (x *TestVariantBranch) GetFinalizingSegment() *anypb.Any {
	if x != nil {
		return x.FinalizingSegment
	}
	return nil
}

func (x *TestVariantBranch) GetStatistics() *anypb.Any {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *TestVariantBranch) GetHotBuffer() *InputBuffer {
	if x != nil {
		return x.HotBuffer
	}
	return nil
}

func (x *TestVariantBranch) GetColdBuffer() *InputBuffer {
	if x != nil {
		return x.ColdBuffer
	}
	return nil
}

// InputBuffer contains the verdict history of the test variant branch.
// It is used for both the hot buffer and the cold buffer.
type InputBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of test verdicts in the input buffer.
	Length int64 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// Verdicts, sorted by commit position (oldest first), and
	// then result time (oldest first).
	Verdicts []*PositionVerdict `protobuf:"bytes,2,rep,name=verdicts,proto3" json:"verdicts,omitempty"`
}

func (x *InputBuffer) Reset() {
	*x = InputBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuffer) ProtoMessage() {}

func (x *InputBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuffer.ProtoReflect.Descriptor instead.
func (*InputBuffer) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{2}
}

func (x *InputBuffer) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *InputBuffer) GetVerdicts() []*PositionVerdict {
	if x != nil {
		return x.Verdicts
	}
	return nil
}

// PositionVerdict represents a test verdict at a commit position.
type PositionVerdict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The commit position for the verdict.
	CommitPosition int64 `protobuf:"varint,1,opt,name=commitPosition,proto3" json:"commitPosition,omitempty"`
	// The time that this verdict is produced, truncated to the nearest hour.
	Hour *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=hour,proto3" json:"hour,omitempty"`
	// Whether the verdict is exonerated or not.
	IsExonerated bool                   `protobuf:"varint,3,opt,name=is_exonerated,json=isExonerated,proto3" json:"is_exonerated,omitempty"`
	Runs         []*PositionVerdict_Run `protobuf:"bytes,4,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *PositionVerdict) Reset() {
	*x = PositionVerdict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionVerdict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionVerdict) ProtoMessage() {}

func (x *PositionVerdict) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionVerdict.ProtoReflect.Descriptor instead.
func (*PositionVerdict) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{3}
}

func (x *PositionVerdict) GetCommitPosition() int64 {
	if x != nil {
		return x.CommitPosition
	}
	return 0
}

func (x *PositionVerdict) GetHour() *timestamppb.Timestamp {
	if x != nil {
		return x.Hour
	}
	return nil
}

func (x *PositionVerdict) GetIsExonerated() bool {
	if x != nil {
		return x.IsExonerated
	}
	return false
}

func (x *PositionVerdict) GetRuns() []*PositionVerdict_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

type PositionVerdict_Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of expectedly passed results in the run.
	ExpectedPassCount int64 `protobuf:"varint,1,opt,name=expected_pass_count,json=expectedPassCount,proto3" json:"expected_pass_count,omitempty"`
	// Number of expectedly failed results in the run.
	ExpectedFailCount int64 `protobuf:"varint,2,opt,name=expected_fail_count,json=expectedFailCount,proto3" json:"expected_fail_count,omitempty"`
	// Number of expectedly crashed results in the run.
	ExpectedCrashCount int64 `protobuf:"varint,3,opt,name=expected_crash_count,json=expectedCrashCount,proto3" json:"expected_crash_count,omitempty"`
	// Number of expectedly aborted results in the run.
	ExpectedAbortCount int64 `protobuf:"varint,4,opt,name=expected_abort_count,json=expectedAbortCount,proto3" json:"expected_abort_count,omitempty"`
	// Number of unexpectedly passed results in the run.
	UnexpectedPassCount int64 `protobuf:"varint,5,opt,name=unexpected_pass_count,json=unexpectedPassCount,proto3" json:"unexpected_pass_count,omitempty"`
	// Number of unexpectedly failed results in the run.
	UnexpectedFailCount int64 `protobuf:"varint,6,opt,name=unexpected_fail_count,json=unexpectedFailCount,proto3" json:"unexpected_fail_count,omitempty"`
	// Number of unexpectedly crashed results in the run.
	UnexpectedCrashCount int64 `protobuf:"varint,7,opt,name=unexpected_crash_count,json=unexpectedCrashCount,proto3" json:"unexpected_crash_count,omitempty"`
	// Number of unexpectedly aborted results in the run.
	UnexpectedAbortCount int64 `protobuf:"varint,8,opt,name=unexpected_abort_count,json=unexpectedAbortCount,proto3" json:"unexpected_abort_count,omitempty"`
	// Whether this run is a duplicate run.
	IsDuplicate bool `protobuf:"varint,9,opt,name=is_duplicate,json=isDuplicate,proto3" json:"is_duplicate,omitempty"`
}

func (x *PositionVerdict_Run) Reset() {
	*x = PositionVerdict_Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionVerdict_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionVerdict_Run) ProtoMessage() {}

func (x *PositionVerdict_Run) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionVerdict_Run.ProtoReflect.Descriptor instead.
func (*PositionVerdict_Run) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PositionVerdict_Run) GetExpectedPassCount() int64 {
	if x != nil {
		return x.ExpectedPassCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetExpectedFailCount() int64 {
	if x != nil {
		return x.ExpectedFailCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetExpectedCrashCount() int64 {
	if x != nil {
		return x.ExpectedCrashCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetExpectedAbortCount() int64 {
	if x != nil {
		return x.ExpectedAbortCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetUnexpectedPassCount() int64 {
	if x != nil {
		return x.UnexpectedPassCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetUnexpectedFailCount() int64 {
	if x != nil {
		return x.UnexpectedFailCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetUnexpectedCrashCount() int64 {
	if x != nil {
		return x.UnexpectedCrashCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetUnexpectedAbortCount() int64 {
	if x != nil {
		return x.UnexpectedAbortCount
	}
	return 0
}

func (x *PositionVerdict_Run) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

var File_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x04, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x43, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x68, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x09, 0x68, 0x6f, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x22, 0x64, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x22, 0x8c, 0x05, 0x0a, 0x0f, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x6f, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x75,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x52,
	0x04, 0x72, 0x75, 0x6e, 0x73, 0x1a, 0xc0, 0x03, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x72, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x72, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x32, 0x72, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x5b, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescData = file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDesc
)

func file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescData)
	})
	return file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_goTypes = []interface{}{
	(*GetTestVariantBranchRequest)(nil), // 0: luci.analysis.v1.GetTestVariantBranchRequest
	(*TestVariantBranch)(nil),           // 1: luci.analysis.v1.TestVariantBranch
	(*InputBuffer)(nil),                 // 2: luci.analysis.v1.InputBuffer
	(*PositionVerdict)(nil),             // 3: luci.analysis.v1.PositionVerdict
	(*PositionVerdict_Run)(nil),         // 4: luci.analysis.v1.PositionVerdict.Run
	(*Variant)(nil),                     // 5: luci.analysis.v1.Variant
	(*SourceRef)(nil),                   // 6: luci.analysis.v1.SourceRef
	(*anypb.Any)(nil),                   // 7: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),       // 8: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_depIdxs = []int32{
	5,  // 0: luci.analysis.v1.TestVariantBranch.variant:type_name -> luci.analysis.v1.Variant
	6,  // 1: luci.analysis.v1.TestVariantBranch.ref:type_name -> luci.analysis.v1.SourceRef
	7,  // 2: luci.analysis.v1.TestVariantBranch.finalized_segments:type_name -> google.protobuf.Any
	7,  // 3: luci.analysis.v1.TestVariantBranch.finalizing_segment:type_name -> google.protobuf.Any
	7,  // 4: luci.analysis.v1.TestVariantBranch.statistics:type_name -> google.protobuf.Any
	2,  // 5: luci.analysis.v1.TestVariantBranch.hot_buffer:type_name -> luci.analysis.v1.InputBuffer
	2,  // 6: luci.analysis.v1.TestVariantBranch.cold_buffer:type_name -> luci.analysis.v1.InputBuffer
	3,  // 7: luci.analysis.v1.InputBuffer.verdicts:type_name -> luci.analysis.v1.PositionVerdict
	8,  // 8: luci.analysis.v1.PositionVerdict.hour:type_name -> google.protobuf.Timestamp
	4,  // 9: luci.analysis.v1.PositionVerdict.runs:type_name -> luci.analysis.v1.PositionVerdict.Run
	0,  // 10: luci.analysis.v1.TestVariantBranches.Get:input_type -> luci.analysis.v1.GetTestVariantBranchRequest
	1,  // 11: luci.analysis.v1.TestVariantBranches.Get:output_type -> luci.analysis.v1.TestVariantBranch
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_init() }
func file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestVariantBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionVerdict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionVerdict_Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto = out.File
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_rawDesc = nil
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_v1_test_variant_branches_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestVariantBranchesClient is the client API for TestVariantBranches service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestVariantBranchesClient interface {
	// Retrieves the current state of test variant branch analysis.
	Get(ctx context.Context, in *GetTestVariantBranchRequest, opts ...grpc.CallOption) (*TestVariantBranch, error)
}
type testVariantBranchesPRPCClient struct {
	client *prpc.Client
}

func NewTestVariantBranchesPRPCClient(client *prpc.Client) TestVariantBranchesClient {
	return &testVariantBranchesPRPCClient{client}
}

func (c *testVariantBranchesPRPCClient) Get(ctx context.Context, in *GetTestVariantBranchRequest, opts ...grpc.CallOption) (*TestVariantBranch, error) {
	out := new(TestVariantBranch)
	err := c.client.Call(ctx, "luci.analysis.v1.TestVariantBranches", "Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type testVariantBranchesClient struct {
	cc grpc.ClientConnInterface
}

func NewTestVariantBranchesClient(cc grpc.ClientConnInterface) TestVariantBranchesClient {
	return &testVariantBranchesClient{cc}
}

func (c *testVariantBranchesClient) Get(ctx context.Context, in *GetTestVariantBranchRequest, opts ...grpc.CallOption) (*TestVariantBranch, error) {
	out := new(TestVariantBranch)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.TestVariantBranches/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestVariantBranchesServer is the server API for TestVariantBranches service.
type TestVariantBranchesServer interface {
	// Retrieves the current state of test variant branch analysis.
	Get(context.Context, *GetTestVariantBranchRequest) (*TestVariantBranch, error)
}

// UnimplementedTestVariantBranchesServer can be embedded to have forward compatible implementations.
type UnimplementedTestVariantBranchesServer struct {
}

func (*UnimplementedTestVariantBranchesServer) Get(context.Context, *GetTestVariantBranchRequest) (*TestVariantBranch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterTestVariantBranchesServer(s prpc.Registrar, srv TestVariantBranchesServer) {
	s.RegisterService(&_TestVariantBranches_serviceDesc, srv)
}

func _TestVariantBranches_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestVariantBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestVariantBranchesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.TestVariantBranches/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestVariantBranchesServer).Get(ctx, req.(*GetTestVariantBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestVariantBranches_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.analysis.v1.TestVariantBranches",
	HandlerType: (*TestVariantBranchesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TestVariantBranches_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/analysis/proto/v1/test_variant_branches.proto",
}
