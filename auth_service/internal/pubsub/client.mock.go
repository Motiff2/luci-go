// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package pubsub is a generated GoMock package.
package pubsub

import (
	context "context"
	reflect "reflect"

	iam "cloud.google.com/go/iam"
	gomock "github.com/golang/mock/gomock"
)

// MockPubsubClient is a mock of PubsubClient interface.
type MockPubsubClient struct {
	ctrl     *gomock.Controller
	recorder *MockPubsubClientMockRecorder
}

// MockPubsubClientMockRecorder is the mock recorder for MockPubsubClient.
type MockPubsubClientMockRecorder struct {
	mock *MockPubsubClient
}

// NewMockPubsubClient creates a new mock instance.
func NewMockPubsubClient(ctrl *gomock.Controller) *MockPubsubClient {
	mock := &MockPubsubClient{ctrl: ctrl}
	mock.recorder = &MockPubsubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubsubClient) EXPECT() *MockPubsubClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPubsubClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPubsubClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubsubClient)(nil).Close))
}

// GetIAMPolicy mocks base method.
func (m *MockPubsubClient) GetIAMPolicy(ctx context.Context) (*iam.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIAMPolicy", ctx)
	ret0, _ := ret[0].(*iam.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIAMPolicy indicates an expected call of GetIAMPolicy.
func (mr *MockPubsubClientMockRecorder) GetIAMPolicy(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIAMPolicy", reflect.TypeOf((*MockPubsubClient)(nil).GetIAMPolicy), ctx)
}

// SetIAMPolicy mocks base method.
func (m *MockPubsubClient) SetIAMPolicy(ctx context.Context, policy *iam.Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIAMPolicy", ctx, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIAMPolicy indicates an expected call of SetIAMPolicy.
func (mr *MockPubsubClientMockRecorder) SetIAMPolicy(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIAMPolicy", reflect.TypeOf((*MockPubsubClient)(nil).SetIAMPolicy), ctx, policy)
}
